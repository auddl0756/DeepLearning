{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"},"colab":{"name":"chatbot_tutorial2.ipynb의 사본","provenance":[{"file_id":"1bmP-ToosuM6lLnSRjWRmVToCsL-cEc8T","timestamp":1593768734262}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Hoc72OFDVv47","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593768765159,"user_tz":-540,"elapsed":939,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["%matplotlib inline"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nuJYZZDaVv5G","colab_type":"text"},"source":["\n","챗봇 튜토리얼\n","================\n","**Author:** `Matthew Inkawhich <https://github.com/MatthewInkawhich>`_\n","  **번역**: `김진현 <https://github.com/lewha0>`_\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lB9m0XPCVv5I","colab_type":"text"},"source":["이 튜토리얼에서는 순환(recurrent) 시퀀스 투 시퀀스(sequence-to-sequence)\n","모델의 재미있고 흥미로운 사용 예를 살펴보려 합니다. 간단한 챗봇을 학습해\n","볼 텐데, 사용할 데이터는 영화 대본으로 구성된 `Cornell Movie-Dialogs(코넬\n","대학교의 영화 속 대화 말뭉치 데이터\n","<https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html>`__\n","입니다.\n","\n","대화형 모델은 많은 사람들이 관심을 갖는 인공지능 분야의 연구 주제입니다.\n","고객 서비스와 관련된 활용, 온라인 헬프데스크 등 여러 상황에서 챗봇을\n","활용할 수 있습니다. 많은 챗봇이 검색 기반(retrieval-based) 모델을\n","사용하는데, 이는 특정한 형식을 갖춘 질문에 대해 미리 정해진 반응을\n","출력하는 방식입니다. 분야를 특정 회사의 IT 헬프데스크처럼 한정짓는다면\n","이러한 모델을 사용해도 충분합니다. 그러나 이런 모델은 좀 더 일반적인\n","상황에 활용할 수 있을만큼 강력하진 않습니다. 기계를 학습시켜서 사람과\n","여러 주제에 대해 의미 있는 대화를 하게끔 하는 것은 아직 해결되지 않은\n","연구 주제입니다. 그러나 최근에 딥러닝이 유행하면서 여러 가지의 강력한\n","생성 모델이 등장했습니다. 그러한 모델의 한 예인 구글의 `신경 대화\n","모델(Neural Conversational Model) <https://arxiv.org/abs/1506.05869>`__ 은\n","다중 도메인 대화 생성 모델(multi-domain generative conversational models)\n","분야에 있어서 큰 진전을 이루었습니다. 우리는 이 튜토리얼을 통해 이러한\n","모델을 PyTorch로 구현해보려 합니다.\n","\n",".. figure:: /_static/img/chatbot/bot.png\n","   :align: center\n","   :alt: bot\n","\n",".. code:: python\n","\n","  > hello? (안녕하세요?)\n","  Bot: hello . (안녕하세요.)\n","  > where am I? (여긴 어디죠?)\n","  Bot: you re in a hospital . (병원입니다.)\n","  > who are you? (당신은 누구시죠?)\n","  Bot: i m a lawyer . (변호사입니다.)\n","  > how are you doing? (어떻게 지내세요?)\n","  Bot: i m fine . (잘 지냅니다.)\n","  > are you my friend? (당신은 제 친구인가요?)\n","  Bot: no . (아뇨.)\n","  > you're under arrest (당신을 체포하겠습니다)\n","  Bot: i m trying to help you ! (난 당신을 도우려 하는 겁니다!)\n","  > i'm just kidding (농담이었어요)\n","  Bot: i m sorry . (미안하네요.)\n","  > where are you from? (어디서 오셨어요?)\n","  Bot: san francisco . (샌프란시스코요.)\n","  > it's time for me to leave (전 이제 가봐야겠네요)\n","  Bot: i know . (알겠습니다.)\n","  > goodbye (안녕히 계세요)\n","  Bot: goodbye . (안녕히 가세요.)\n","\n","**이 튜토리얼의 핵심 내용**\n","\n","-  `코넬 대학교의 영화 속 대화 말뭉치 데이터셋\n","   <https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html>`__ 을\n","   읽어오고 전처리합니다\n","-  `Luong의 어텐션(attention) 메커니즘 <https://arxiv.org/abs/1508.04025>`__ 을\n","   이용하여 sequence-to-sequence 모델을 구현합니다\n","-  미니배치를 이용하여 인코더와 디코더를 함께 학습합니다\n","-  탐욕적 탐색 기법(greedy-search)을 사용하는 디코더 모듈을 구현합니다\n","-  학습한 챗봇과 대화를 나눠 봅니다\n","\n","**감사의 글**\n","\n","이 튜토리얼은 다음 자료의 도움을 받아 작성하였습니다.\n","\n","1) Yuan-Kuei Wu의 pytorch-chatbot 구현체:\n","   https://github.com/ywk991112/pytorch-chatbot\n","\n","2) Sean Robertson의 practical-pytorch seq2seq-translation 예제:\n","   https://github.com/spro/practical-pytorch/tree/master/seq2seq-translation\n","\n","3) FloydHub의 코넬 대학교의 영화 말뭉치 데이터 전처리 코드:\n","   https://github.com/floydhub/textutil-preprocess-cornell-movie-corpus\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"hobLEudrVv5J","colab_type":"text"},"source":["준비 단계\n","---------\n","\n","시작에 앞서, `여기 <https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html>`__ 에서\n","ZIP 파일 형태의 데이터를 내려받고, 현재 디렉토리 아래에 ``data/`` 라는\n","디렉토리를 만들어서 내려받은 데이터를 옮겨두시기 바랍니다.\n","\n","그 다음에는, 몇 가지 필요한 도구들을 import 하겠습니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"FlHcztlsYkll","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1593768801506,"user_tz":-540,"elapsed":20380,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"9635f005-c407-481f-8207-a53ba26b0698"},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ONZdy-M5Vv5K","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593768960198,"user_tz":-540,"elapsed":743,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["from __future__ import absolute_import\n","from __future__ import division\n","from __future__ import print_function\n","from __future__ import unicode_literals\n","\n","import torch\n","from torch.jit import script, trace\n","import torch.nn as nn\n","from torch import optim\n","import torch.nn.functional as F\n","from queue import PriorityQueue\n","import csv\n","import random\n","import re\n","import os\n","import unicodedata\n","import codecs\n","from io import open\n","import itertools\n","import math\n","\n","import operator\n","#from collections import PriorityQueue\n","\n","\n","USE_CUDA = torch.cuda.is_available()\n","device = torch.device(\"cuda\" if USE_CUDA else \"cpu\")"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QBccEaaTVv5R","colab_type":"text"},"source":["데이터 읽기 & 전처리하기\n","------------------------\n","\n","다음 단계는 데이터 파일의 형식을 재조정한 후, 우리가 작업하기 편한\n","구조로 읽어들이는 것입니다.\n","\n","`코넬 대학교의 영화 속 대화 말뭉치 데이터셋\n","<https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html>`__ 은\n","영화 속 등장 인물의 대화가 풍부하게 포함된 데이터셋입니다.\n","\n","-  영화 속 등장 인물 10,292 쌍이 대화를 220,579번 주고받습니다\n","-  영화 617개의 등장 인물 9,035명이 나옵니다\n","-  총 발화(utterance) 수는 304,713번입니다\n","\n","이 데이터셋은 규모도 크고 내용도 다양하며, 격식체와 비격식체, 여러\n","시간대, 여러 감정 상태 등이 두루 포함되어 있습니다. 우리의 바람은\n","이러한 다양성으로 인해 모델이 견고해지는, 즉 모델이 여러 종류의 입력\n","및 질의에 잘 대응할 수 있게 되는 것입니다.\n","\n","우선은 원본 데이터 파일을 몇 줄 살펴보면서 형식이 어떻게 되어있는지\n","살펴 보겠습니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"xHdiPrgkM5qh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1593762772505,"user_tz":-540,"elapsed":1210,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"7c3e56b5-6bf9-41e3-dd97-6c038816fa19"},"source":["#%cd content"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[Errno 2] No such file or directory: 'content'\n","/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6rTTXfQXV9bd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":105},"executionInfo":{"status":"ok","timestamp":1593768984513,"user_tz":-540,"elapsed":6155,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"2c9cbcf6-50aa-4047-9982-b83667e2ffe7"},"source":["!pwd\n","#!ls ../\n","!ls\n","#!ls /gdriv/contente/My Drive/pytorch_chatbot/data/cornell movie-dialogs corpus\n","#%cd gdrive/'My Drive'/pytorch_chatbot/\n","#%cd ..\n","!pwd\n","%cd gdrive/'My Drive'/pytorch_chatbot\n","!ls\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["/content\n","gdrive\tsample_data\n","/content\n","/content/gdrive/My Drive/pytorch_chatbot\n","chatbot_tutorial2.ipynb  chatbot_tutorial.ipynb  data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fyYm3QrWVv5S","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":230},"executionInfo":{"status":"ok","timestamp":1593768987875,"user_tz":-540,"elapsed":2826,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"2815bc6f-351c-4dea-fb55-14322259ab0b"},"source":["\n","corpus_name =\"cornell movie-dialogs corpus\"\n","\n","corpus = os.path.join(\"data\", corpus_name)\n","print(corpus)\n","def printLines(file, n=10):\n","    with open(file, 'rb') as datafile:\n","        lines = datafile.readlines()\n","    for line in lines[:n]:\n","        print(line)\n","\n","printLines(os.path.join(corpus, \"movie_lines.txt\"))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["data/cornell movie-dialogs corpus\n","b'L1045 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ They do not!\\n'\n","b'L1044 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ They do to!\\n'\n","b'L985 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ I hope so.\\n'\n","b'L984 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ She okay?\\n'\n","b\"L925 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Let's go.\\n\"\n","b'L924 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ Wow\\n'\n","b\"L872 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Okay -- you're gonna need to learn how to lie.\\n\"\n","b'L871 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ No\\n'\n","b'L870 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ I\\'m kidding.  You know how sometimes you just become this \"persona\"?  And you don\\'t know how to quit?\\n'\n","b'L869 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Like my fear of wearing pastels?\\n'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"41zVI2R0Vv5Z","colab_type":"text"},"source":["원하는 형식의 데이터 파일로 만들기\n","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","\n","편의를 위해 데이터의 형식을 원하는 형태로 만들려고 합니다. 각 줄에\n","*질의 문장* 과 *응답 문장* 의 쌍이 탭으로 구분되어 있게끔 하는 것입니다.\n","\n","다음의 함수를 통해 *movie_lines.txt* 원본 데이터 파일을 파싱하려\n","합니다.\n","\n","-  ``loadLines`` 는 파일에 포함된 대사를 변환하여 항목(대사 ID ``lineID``,\n","   인물 ID ``characterID``, 영화 ID ``movieID``, 인물 ``character``, 대사\n","   내용 ``text``)에 대한 사전 형태로 변환합니다\n","-  ``loadConversations`` 는 ``loadLines`` 를 통해 읽어들인\n","   대사(``lines``)의 항목(``fields``)를 *movie_conversations.txt* 에 나와\n","   있는 내용에 맞춰 대화 형태로 묶습니다\n","-  ``extractSentencePairs`` 는 대화(``conversations``)에서 문장 쌍을\n","   추출합니다\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"x6n_TE91Vv5a","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593768993432,"user_tz":-540,"elapsed":667,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["# 파일에 포함된 대사를 쪼개서 항목에 대한 사전(``dict``) 형태로 변환합니다\n","def loadLines(fileName, fields):\n","    lines = {}\n","    with open(fileName, 'r', encoding='iso-8859-1') as f:\n","        for line in f:\n","            values = line.split(\" +++$+++ \")\n","            # 항목을 추출합니다\n","            lineObj = {}\n","            for i, field in enumerate(fields):\n","                lineObj[field] = values[i]\n","            lines[lineObj['lineID']] = lineObj\n","    return lines\n","\n","\n","# 대사의 항목을 *movie_conversations.txt* 를 참고하여 대화 형태로 묶습니다\n","def loadConversations(fileName, lines, fields):\n","    conversations = []\n","    with open(fileName, 'r', encoding='iso-8859-1') as f:\n","        for line in f:\n","            values = line.split(\" +++$+++ \")\n","            # 항목을 추출합니다\n","            convObj = {}\n","            for i, field in enumerate(fields):\n","                convObj[field] = values[i]\n","            # 문자열을 리스트로 변환합니다(convObj[\"utteranceIDs\"] == \"['L598485', 'L598486', ...]\")\n","            utterance_id_pattern = re.compile('L[0-9]+')\n","            lineIds = utterance_id_pattern.findall(convObj[\"utteranceIDs\"])\n","            # 대사를 재구성합니다\n","            convObj[\"lines\"] = []\n","            for lineId in lineIds:\n","                convObj[\"lines\"].append(lines[lineId])\n","            conversations.append(convObj)\n","    return conversations\n","\n","\n","# conversations에서 문장 쌍을 추출합니다\n","def extractSentencePairs(conversations):\n","    qa_pairs = []\n","    for conversation in conversations:\n","        # 대화를 이루는 각 대사에 대해 반복문을 수행합니다\n","        # 대화의 마지막 대사는 (그에 대한 응답이 없으므로) 무시합니다\n","        for i in range(len(conversation[\"lines\"]) - 1):\n","            inputLine = conversation[\"lines\"][i][\"text\"].strip()\n","            targetLine = conversation[\"lines\"][i+1][\"text\"].strip()\n","            # 잘못된 샘플은 제거합니다(리스트가 하나라도 비어 있는 경우)\n","            if inputLine and targetLine:\n","                qa_pairs.append([inputLine, targetLine])\n","    return qa_pairs"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UZ9k8mINVv5i","colab_type":"text"},"source":["이제 이 함수들을 호출하여 새로운 파일인 *formatted_movie_lines.txt* 를\n","만듭니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"wJINf1D9Vv5j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":530},"executionInfo":{"status":"ok","timestamp":1593769001062,"user_tz":-540,"elapsed":4357,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"e5b0d173-6ebe-4d95-b798-f308133bb97f"},"source":["# 새 파일에 대한 경로를 정의합니다\n","datafile = os.path.join(corpus, \"formatted_movie_lines.txt\")\n","\n","printLines(datafile)\n","\n","delimiter = '\\t'\n","# 구분자에 대해 unescape 함수를 호출합니다\n","delimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n","\n","# 대사 사전(dict), 대화 리스트(list), 그리고 각 항목의 이름을 초기화합니다\n","lines = {}\n","conversations = []\n","MOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\n","MOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n","\n","# 대사(lines)를 읽어들여 대화(conversations)로 재구성합니다\n","print(\"\\nProcessing corpus...\")\n","lines = loadLines(os.path.join(corpus, \"movie_lines.txt\"), MOVIE_LINES_FIELDS)\n","print(\"\\nLoading conversations...\")\n","conversations = loadConversations(os.path.join(corpus, \"movie_conversations.txt\"),\n","                                  lines, MOVIE_CONVERSATIONS_FIELDS)\n","\n","# 결과를 새로운 csv 파일로 저장합니다\n","print(\"\\nWriting newly formatted file...\")\n","with open(datafile, 'w', encoding='utf-8') as outputfile:\n","    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n","    for pair in extractSentencePairs(conversations):\n","        writer.writerow(pair)\n","\n","# 몇 줄을 예제 삼아 출력해 봅니다\n","print(\"\\nSample lines from file:\")\n","printLines(datafile)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["b\"Can we make this quick?  Roxanne Korrine and Andrew Barrett are having an incredibly horrendous public break- up on the quad.  Again.\\tWell, I thought we'd start with pronunciation, if that's okay with you.\\n\"\n","b\"Well, I thought we'd start with pronunciation, if that's okay with you.\\tNot the hacking and gagging and spitting part.  Please.\\n\"\n","b\"Not the hacking and gagging and spitting part.  Please.\\tOkay... then how 'bout we try out some French cuisine.  Saturday?  Night?\\n\"\n","b\"You're asking me out.  That's so cute. What's your name again?\\tForget it.\\n\"\n","b\"No, no, it's my fault -- we didn't have a proper introduction ---\\tCameron.\\n\"\n","b\"Cameron.\\tThe thing is, Cameron -- I'm at the mercy of a particularly hideous breed of loser.  My sister.  I can't date until she does.\\n\"\n","b\"The thing is, Cameron -- I'm at the mercy of a particularly hideous breed of loser.  My sister.  I can't date until she does.\\tSeems like she could get a date easy enough...\\n\"\n","b'Why?\\tUnsolved mystery.  She used to be really popular when she started high school, then it was just like she got sick of it or something.\\n'\n","b\"Unsolved mystery.  She used to be really popular when she started high school, then it was just like she got sick of it or something.\\tThat's a shame.\\n\"\n","b'Gosh, if only we could find Kat a boyfriend...\\tLet me see what I can do.\\n'\n","\n","Processing corpus...\n","\n","Loading conversations...\n","\n","Writing newly formatted file...\n","\n","Sample lines from file:\n","b\"Can we make this quick?  Roxanne Korrine and Andrew Barrett are having an incredibly horrendous public break- up on the quad.  Again.\\tWell, I thought we'd start with pronunciation, if that's okay with you.\\n\"\n","b\"Well, I thought we'd start with pronunciation, if that's okay with you.\\tNot the hacking and gagging and spitting part.  Please.\\n\"\n","b\"Not the hacking and gagging and spitting part.  Please.\\tOkay... then how 'bout we try out some French cuisine.  Saturday?  Night?\\n\"\n","b\"You're asking me out.  That's so cute. What's your name again?\\tForget it.\\n\"\n","b\"No, no, it's my fault -- we didn't have a proper introduction ---\\tCameron.\\n\"\n","b\"Cameron.\\tThe thing is, Cameron -- I'm at the mercy of a particularly hideous breed of loser.  My sister.  I can't date until she does.\\n\"\n","b\"The thing is, Cameron -- I'm at the mercy of a particularly hideous breed of loser.  My sister.  I can't date until she does.\\tSeems like she could get a date easy enough...\\n\"\n","b'Why?\\tUnsolved mystery.  She used to be really popular when she started high school, then it was just like she got sick of it or something.\\n'\n","b\"Unsolved mystery.  She used to be really popular when she started high school, then it was just like she got sick of it or something.\\tThat's a shame.\\n\"\n","b'Gosh, if only we could find Kat a boyfriend...\\tLet me see what I can do.\\n'\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hf20fp5rtsWJ","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7mASO6_gVv5r","colab_type":"text"},"source":["데이터 읽고 정리하기\n","~~~~~~~~~~~~~~~~~~~~\n","\n","다음에 해야 할 일은 어휘집을 만들고, 질의/응답 문장 쌍을 메모리로\n","읽어들이는 것입니다.\n","\n","우리가 다루는 대상은 일련의 **단어** 들이며, 따라서 이들을 이산 공간 상의\n","수치(discrete numerical space)로 자연스럽게 대응시키기 어렵다는 점에\n","유의하시기 바랍니다. 따라서 우리는 데이터셋 안에 들어 있는 단어를 인덱스\n","값으로 변환하는 매핑을 따로 만들어야 합니다.\n","\n","이를 위해 우리는 ``Voc`` 라는 클래스를 만들어 단어에서 인덱스로의\n","매핑, 인덱스에서 단어로의 역 매핑, 각 단어의 등장 횟수, 전체 단어 수\n","등을 관리하려 합니다. 이 클래스는 어휘집에 새로운 단어를 추가하는\n","메서드(``addWord``), 문장에 등장하는 모든 단어를 추가하는\n","메서드(``addSentence``), 그리고 자주 등장하지 않는 단어를 정리하는\n","메서드(``trim``)를 제공합니다. 단어를 정리하는 내용에 대해서는 뒤에서\n","좀 더 자세히 살펴보겠습니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"MyeTuVZ_Vv5s","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769004571,"user_tz":-540,"elapsed":617,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["# 기본 단어 토큰 값\n","PAD_token = 0  # 짧은 문장을 채울(패딩, PADding) 때 사용할 제로 토큰\n","SOS_token = 1  # 문장의 시작(SOS, Start Of Sentence)을 나타내는 토큰\n","EOS_token = 2  # 문장의 끝(EOS, End Of Sentence)을 나태는 토큰\n","\n","class Voc:\n","    def __init__(self, name):\n","        self.name = name\n","        self.trimmed = False\n","        self.word2index = {}\n","        self.word2count = {}\n","        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n","        self.num_words = 3  # SOS, EOS, PAD를 센 것\n","\n","    def addSentence(self, sentence):\n","        for word in sentence.split(' '):\n","            self.addWord(word)\n","\n","    def addWord(self, word):\n","        if word not in self.word2index:\n","            self.word2index[word] = self.num_words\n","            self.word2count[word] = 1\n","            self.index2word[self.num_words] = word\n","            self.num_words += 1\n","        else:\n","            self.word2count[word] += 1\n","\n","    # 등장 횟수가 기준 이하인 단어를 정리합니다\n","    def trim(self, min_count):\n","        if self.trimmed:\n","            return\n","        self.trimmed = True\n","\n","        keep_words = []\n","\n","        for k, v in self.word2count.items():\n","            if v >= min_count:\n","                keep_words.append(k)\n","\n","        print('keep_words {} / {} = {:.4f}'.format(\n","            len(keep_words), len(self.word2index), len(keep_words) / len(self.word2index)\n","        ))\n","\n","        # 사전을 다시 초기화힙니다\n","        self.word2index = {}\n","        self.word2count = {}\n","        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n","        self.num_words = 3 # 기본 토큰을 센 것\n","\n","        for word in keep_words:\n","            self.addWord(word)"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gfQlQDgeVv50","colab_type":"text"},"source":["이제 어휘집과 질의/응답 문장 쌍을 재구성하려 합니다. 그러한 데이터를\n","사용하려면 그 전에 약간의 전처리 작업을 수행해야 합니다.\n","\n","우선, ``unicodeToAscii`` 를 이용하여 유니코드 문자열을 아스키로 변환해야\n","합니다. 다음에는 모든 글자를 소문자로 변환하고, 알파벳도 아니고 기본적인\n","문장 부호도 아닌 글자는 제거합니다(정규화, ``normalizeString``).\n","마지막으로는 학습할 때의 편의성을 위해서, 길이가 일정 기준을 초과하는,\n","즉 ``MAX_LENGTH`` 보다 긴 문장을 제거합니다(``filterPairs``).\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"FfsIHXd2Vv51","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769008053,"user_tz":-540,"elapsed":711,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["MAX_LENGTH = 10  # 고려할 문장의 최대 길이\n","\n","# 유니코드 문자열을 아스키로 변환합니다\n","# https://stackoverflow.com/a/518232/2809427 참고\n","def unicodeToAscii(s):\n","    return ''.join(\n","        c for c in unicodedata.normalize('NFD', s)\n","        if unicodedata.category(c) != 'Mn'\n","    )\n","\n","# 소문자로 만들고, 공백을 넣고, 알파벳 외의 글자를 제거합니다\n","def normalizeString(s):\n","    s = unicodeToAscii(s.lower().strip())\n","    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n","    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n","    s = re.sub(r\"\\s+\", r\" \", s).strip()\n","    return s\n","\n","# 질의/응답 쌍을 읽어서 voc 객체를 반환합니다\n","def readVocs(datafile, corpus_name):\n","    print(\"Reading lines...\")\n","    # 파일을 읽고, 쪼개어 lines에 저장합니다\n","    lines = open(datafile, encoding='utf-8').\\\n","        read().strip().split('\\n')\n","    # 각 줄을 쪼개어 pairs에 저장하고 정규화합니다\n","    pairs = [[normalizeString(s) for s in l.split('\\t')] for l in lines]\n","    voc = Voc(corpus_name)\n","    return voc, pairs\n","\n","# 문장의 쌍 'p'에 포함된 두 문장이 모두 MAX_LENGTH라는 기준보다 짧은지를 반환합니다\n","def filterPair(p):\n","    # EOS 토큰을 위해 입력 시퀀스의 마지막 단어를 보존해야 합니다\n","    #print(\"in filterpair: \",p[:10])\n","    #print(\"p[0] \",p[0])\n","    #print(\"p[1] \",p[1])\n","    return len(p[0].split(' ')) < MAX_LENGTH and len(p[1].split(' ')) < MAX_LENGTH\n","\n","# 조건식 filterPair에 따라 pairs를 필터링합니다\n","def filterPairs(pairs):\n","    return [pair for pair in pairs if filterPair(pair)]\n","\n","# 앞에서 정의한 함수를 이용하여 만든 voc 객체와 리스트 pairs를 반환합니다\n","def loadPrepareData(corpus, corpus_name, datafile, save_dir):\n","    print(\"Start preparing training data ...\")\n","    voc, pairs = readVocs(datafile, corpus_name)\n","    print(\"Read {!s} sentence pairs\".format(len(pairs)))\n","    pairs = filterPairs(pairs)\n","    print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n","    print(\"Counting words...\")\n","    for pair in pairs:\n","        voc.addSentence(pair[0])\n","        voc.addSentence(pair[1])\n","    print(\"Counted words:\", voc.num_words)\n","    return voc, pairs\n","\n","\n","###################추가###########################\n","def loadPrepareData2(corpus,corpus_name,datafile,save_dir):\n","    print(\"Start preparing training data ...\")\n","    voc, pairs = readVocs(datafile, corpus_name)\n","    print(\"Read {!s} sentence pairs\".format(len(pairs)))\n","    #pairs = filterPairs(pairs)\n","    print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n","    print(\"Counting words...\")\n","    for pair in pairs:\n","        print(\"pair= \",pair)\n","        if(len(pair)==1):\n","          break\n","        voc.addSentence(pair[0])\n","        voc.addSentence(pair[1])\n","    print(\"Counted words:\", voc.num_words)\n","    return voc, pairs\n","\n"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"8jhQ_ODi3oPC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"status":"ok","timestamp":1593769029907,"user_tz":-540,"elapsed":14966,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"ebaf0cef-f75f-4bc1-ba04-bdc0de62aa58"},"source":["# voc와 pairs를 읽고 재구성합니다\n","save_dir = os.path.join(\"data\", \"save\")\n","voc, pairs = loadPrepareData(corpus, corpus_name, datafile, save_dir)\n","# 검증을 위해 pairs의 일부 내용을 출력해 봅니다\n","print(\"\\npairs:\")\n","for pair in pairs[:10]:\n","    print(pair)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Start preparing training data ...\n","Reading lines...\n","Read 221282 sentence pairs\n","Trimmed to 64271 sentence pairs\n","Counting words...\n","Counted words: 18008\n","\n","pairs:\n","['there .', 'where ?']\n","['you have my word . as a gentleman', 'you re sweet .']\n","['hi .', 'looks like things worked out tonight huh ?']\n","['you know chastity ?', 'i believe we share an art instructor']\n","['have fun tonight ?', 'tons']\n","['well no . . .', 'then that s all you had to say .']\n","['then that s all you had to say .', 'but']\n","['but', 'you always been this selfish ?']\n","['do you listen to this crap ?', 'what crap ?']\n","['what good stuff ?', 'the real you .']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LRxYdjaDVv57","colab_type":"text"},"source":["학습 단계가 빨리 수렴하도록 하는 또 다른 전략은 자주 쓰이지 않는 단어를\n","어휘집에서 제거하는 것입니다. 피처 공간의 크기를 줄이면 모델이\n","학습을 통해 근사하려는 함수의 난이도를 낮추는 효과도 있습니다. 우리는\n","이를 두 단계로 나눠 진행하려 합니다.\n","\n","1) ``voc.trim`` 함수를 이용하여 ``MIN_COUNT`` 라는 기준 이하의 단어를\n","   제거합니다.\n","\n","2) 제거하기로 한 단어를 포함하는 경우를 pairs에서 제외합니다\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"jkXXdF5_uyON","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1593767371605,"user_tz":-540,"elapsed":958,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"b26421b2-6a66-4842-9fe9-f06df792d60e"},"source":["############################추가####################################\n","\n","datafile2 = os.path.join(corpus, \"user_formatted_movie_lines.txt\")\n","voc2, pairs2 = loadPrepareData2(corpus, corpus_name, datafile2, save_dir)\n","print(pairs2)\n","# # 검증을 위해 pairs의 일부 내용을 출력해 봅니다\n","\n","# # def loadPrepareData(corpus, corpus_name, datafile, save_dir):\n","# #     print(\"Start preparing training data ...\")\n","# #     voc, pairs = readVocs(datafile, corpus_name)\n","# #     print(\"Read {!s} sentence pairs\".format(len(pairs)))\n","# #     pairs = filterPairs(pairs)\n","# #     print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n","# #     print(\"Counting words...\")\n","# #     for pair in pairs:\n","# #         voc.addSentence(pair[0])\n","# #         voc.addSentence(pair[1])\n","# #     print(\"Counted words:\", voc.num_words)\n","# #     return voc, pairs\n","\n","\n","# print(\"\\npairs2:\")\n","# for pair in pairs2[:10]:\n","#     print(pair)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Start preparing training data ...\n","Reading lines...\n","Read 16 sentence pairs\n","Trimmed to 16 sentence pairs\n","Counting words...\n","pair=  ['are you at home ?', 'no . . . . .']\n","pair=  ['where are you ?', 'i m in the middle . .']\n","pair=  ['middle where ?', 'in the trunk . . .']\n","pair=  ['car trunk ?', 'yeah . . . . .']\n","pair=  ['why are you there ?', 'i m doing something . . .']\n","pair=  ['something what ?', 'the fuck . . . .']\n","pair=  ['.']\n","Counted words: 25\n","[['are you at home ?', 'no . . . . .'], ['where are you ?', 'i m in the middle . .'], ['middle where ?', 'in the trunk . . .'], ['car trunk ?', 'yeah . . . . .'], ['why are you there ?', 'i m doing something . . .'], ['something what ?', 'the fuck . . . .'], ['.'], ['are you at home ?', 'no . . . . .'], ['what are you doing in the car trunk ?', 'i m not gonna talk about it . .'], ['why ?', 'i don t know . . .'], ['please tell me', 'i m not going to know you . .'], ['tell me what are you going to do', 'i m going to kill you . .'], ['ok . .', 'i m sorry . . . .'], ['hello', 'hello . . . .'], ['hi', 'hi . . . .'], ['bye', 'bye . . . .']]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yqO94MtiVv58","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769037343,"user_tz":-540,"elapsed":632,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["MIN_COUNT = 3    # 제외할 단어의 기준이 되는 등장 횟수\n","\n","def trimRareWords(voc, pairs, MIN_COUNT):\n","    # MIN_COUNT 미만으로 사용된 단어는 voc에서 제외합니다\n","    voc.trim(MIN_COUNT)\n","    # 제외할 단어가 포함된 경우를 pairs에서도 제외합니다\n","    keep_pairs = []\n","    for pair in pairs:\n","        #print(pair)\n","        if(len(pair)==1):\n","          break\n","        input_sentence = pair[0]\n","        output_sentence = pair[1]\n","        keep_input = True\n","        keep_output = True\n","        # 입력 문장을 검사합니다\n","        for word in input_sentence.split(' '):\n","            if word not in voc.word2index:\n","                keep_input = False\n","                break\n","        # 출력 문장을 검사합니다\n","        for word in output_sentence.split(' '):\n","            if word not in voc.word2index:\n","                keep_output = False\n","                break\n","\n","        # 입출력 문장에 제외하기로 한 단어를 포함하지 않는 경우만을 남겨둡니다\n","        if keep_input and keep_output:\n","            keep_pairs.append(pair)\n","\n","    print(len(keep_pairs) ,len(pairs))\n","    print(\"Trimmed from {} pairs to {}, {:.4f} of total\".format(len(pairs), len(keep_pairs), len(keep_pairs) / len(pairs)))\n","    return keep_pairs\n","\n"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"IJFVpqnV65wM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1593769041462,"user_tz":-540,"elapsed":591,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"b5255652-75db-459c-ab2d-6fcfa1b6196c"},"source":["\n","# voc와 pairs를 정돈합니다\n","pairs = trimRareWords(voc, pairs, MIN_COUNT)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["keep_words 7823 / 18005 = 0.4345\n","53165 64271\n","Trimmed from 64271 pairs to 53165, 0.8272 of total\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vsyKyItm6dAi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"executionInfo":{"status":"ok","timestamp":1593768120145,"user_tz":-540,"elapsed":1099,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"54619134-4dc0-4a66-87a8-414babc1f83f"},"source":["print(len(pairs2))\n","print(pairs2)\n","pairs2=trimRareWords(voc2,pairs2,MIN_COUNT)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n","[['where are you ?', 'i m in the middle . .'], ['middle where ?', 'in the trunk . . .']]\n","2 2\n","Trimmed from 2 pairs to 2, 1.0000 of total\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3LbCqYLlVv6C","colab_type":"text"},"source":["모델을 위한 데이터 준비하기\n","---------------------------\n","\n","상당한 노력을 기울여 데이터를 전처리하고, 잘 정리하여 어휘집 객체와\n","문장 쌍의 리스트 형태로 만들어두긴 했지만, 결국 우리가 만들 모델에서\n","사용하는 입력은 수치 값으로 이루어진 torch 텐서입니다. 처리한 데이터를\n","모델에 맞는 형태로 준비하는 방법의 하나가 `seq2seq 변환 튜토리얼\n","<https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html>`__\n","에 나와 있습니다. 이 튜토리얼에서는 배치 크기로 1을 사용하며, 이는 즉\n","문장에 등장하는 단어를 어휘집에서의 인덱스로 변환하여 모델에 제공하기만\n","하면 된다는 의미입니다.\n","\n","그래도 여러분이 학습 속도나 GPU 병렬 처리 용량을 향상하고 싶다면\n","미니배치를 이용하여 학습해야 할 것입니다.\n","\n","미니배치를 사용한다는 것은 배치에 포함된 문장 길이가 달라질 수 있다는\n","점에 유의해야 한다는 것을 뜻합니다. 같은 배치 안에서 크기가 다른\n","문장을 처리하기 위해서는 배치용 입력 텐서의 모양을 *(max_length,\n","batch_size)* 로 맞춰야 합니다. 이때 *max_length* 보다 짧은 문장에\n","대해서는 *EOS 토큰* 뒤에 제로 토큰을 덧붙이면 됩니다.\n","\n","영어로 된 문장을 텐서로 변환하기 위해 단순히 그에 대응하는 인덱스를\n","사용하고(``indexesFromSentence``) 제로 토큰을 패딩한다고 해봅시다.\n","그러면 텐서의 모양이 *(batch_size, max_length)* 이 되고, 첫 번째 차원에\n","대해 인덱싱을 수행하면 모든 시간대별 문장이 전부 반환될 것입니다.\n","그러나 우리는 배치를 시간에 따라, 그리고 배치에 포함된 모든 문장에\n","대해 인덱싱할 수도 있어야 합니다. 따라서 우리는 입력 배치의 모양을\n","뒤집어서 *(max_length, batch_size)* 형태로 만들 것입니다. 그러고 난\n","후에 첫 번째 차원에 대해 인덱싱하면 배치에 포함된 모든 문장을 시간에\n","대해 인덱싱한 결과를 반환하게 됩니다. 우리는 이 뒤집기 작업을\n","``zeroPadding`` 함수를 이용하여 묵시적으로 수행할 것입니다.\n","\n",".. figure:: /_static/img/chatbot/seq2seq_batches.png\n","   :align: center\n","   :alt: batches\n","\n","``inputVar`` 함수는 문장을 텐서로 변환하는, 그리고 궁극적으로는 제로\n","패딩하여 올바른 모양으로 맞춘 텐서를 만드는 작업을 수행합니다. 이\n","함수는 각 배치에 포함된 시퀀스의 길이(``lengths``)로 구성된 텐서도 같이\n","반환합니다. 그리고 우리는 이를 나중에 디코더로 넘겨줄 것입니다.\n","\n","``outputVar`` 함수는 ``inputVar`` 와 비슷한 작업을 수행하지만, ``lengths``\n","텐서를 반환하는 대신에 이진 마스크로 구성된 텐서와 목표 문장의 최대\n","길이를 같이 반환합니다. 이진 마스크 텐서는 출력에 해당하는 목표 텐서와\n","그 모양이 같지만, 패딩 토큰(*PAD_token*)에 해당하는 경우에는 값이 0이며\n","나머지 경우의 값은 1입니다.\n","\n","``batch2TrainData`` 는 단순히 여러 쌍을 입력으로 받아서, 앞서 설명한\n","함수를 이용하여 입력 및 목표 텐서를 구하여 반환합니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"c8TR5ByvVv6D","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":474},"executionInfo":{"status":"ok","timestamp":1593769045097,"user_tz":-540,"elapsed":697,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"00e5f9b8-d2ec-46a6-c7a4-ff8e48e0185e"},"source":["def indexesFromSentence(voc, sentence):\n","    #print(sentence)\n","    return [voc.word2index[word] for word in sentence.split(' ')] + [EOS_token]\n","\n","\n","def zeroPadding(l, fillvalue=PAD_token):\n","    return list(itertools.zip_longest(*l, fillvalue=fillvalue))\n","\n","def binaryMatrix(l, value=PAD_token):\n","    m = []\n","    for i, seq in enumerate(l):\n","        m.append([])\n","        for token in seq:\n","            if token == PAD_token:\n","                m[i].append(0)\n","            else:\n","                m[i].append(1)\n","    return m\n","\n","# 입력 시퀀스 텐서에 패딩한 결과와 lengths를 반환합니다\n","def inputVar(l, voc):\n","    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n","    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n","    padList = zeroPadding(indexes_batch)\n","    padVar = torch.LongTensor(padList)\n","    return padVar, lengths\n","\n","# 패딩한 목표 시퀀스 텐서, 패딩 마스크, 그리고 최대 목표 길이를 반환합니다\n","def outputVar(l, voc):\n","    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n","    max_target_len = max([len(indexes) for indexes in indexes_batch])\n","    padList = zeroPadding(indexes_batch)\n","    mask = binaryMatrix(padList)\n","    mask = torch.ByteTensor(mask)\n","    padVar = torch.LongTensor(padList)\n","    return padVar, mask, max_target_len\n","\n","# 입력 배치를 이루는 쌍에 대한 모든 아이템을 반환합니다\n","def batch2TrainData(voc, pair_batch):\n","    pair_batch.sort(key=lambda x: len(x[0].split(\" \")), reverse=True)\n","    input_batch, output_batch = [], []\n","    for pair in pair_batch:\n","        input_batch.append(pair[0])\n","        output_batch.append(pair[1])\n","    inp, lengths = inputVar(input_batch, voc)\n","    output, mask, max_target_len = outputVar(output_batch, voc)\n","    return inp, lengths, output, mask, max_target_len\n","\n","\n","# 검증용 예시\n","small_batch_size = 5\n","batches = batch2TrainData(voc, [random.choice(pairs) for _ in range(small_batch_size)])\n","input_variable, lengths, target_variable, mask, max_target_len = batches\n","\n","print(\"input_variable:\", input_variable)\n","print(\"lengths:\", lengths)\n","print(\"target_variable:\", target_variable)\n","print(\"mask:\", mask)\n","print(\"max_target_len:\", max_target_len)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["input_variable: tensor([[ 304,  787,   47,   27,   77],\n","        [ 305,  682,    7,   14,   37],\n","        [ 516,    4,  356,  509,   45],\n","        [4642, 7767,   83,  282,    2],\n","        [ 276,    4,    6,   66,    0],\n","        [   2,    2,    2,    2,    0]])\n","lengths: tensor([6, 6, 6, 6, 4])\n","target_variable: tensor([[5576,  147,  414,   27,    4],\n","        [   6,   47,  192,   14,    4],\n","        [   2,    7,    4,  509,    4],\n","        [   0,   47,    4,  282, 5062],\n","        [   0,  883,    4,   66,    6],\n","        [   0,    4,  318,    2,    4],\n","        [   0, 7767,   66,    0,    4],\n","        [   0,    6,    2,    0,    4],\n","        [   0,    2,    0,    0,    2]])\n","mask: tensor([[1, 1, 1, 1, 1],\n","        [1, 1, 1, 1, 1],\n","        [1, 1, 1, 1, 1],\n","        [0, 1, 1, 1, 1],\n","        [0, 1, 1, 1, 1],\n","        [0, 1, 1, 1, 1],\n","        [0, 1, 1, 0, 1],\n","        [0, 1, 1, 0, 1],\n","        [0, 1, 0, 0, 1]], dtype=torch.uint8)\n","max_target_len: 9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aDVqSwJrVv6I","colab_type":"text"},"source":["모델 정의하기\n","-------------\n","\n","Seq2Seq 모델\n","~~~~~~~~~~~~\n","\n","우리 챗봇의 두뇌에 해당하는 모델은 sequence-to-sequence (seq2seq)\n","모델입니다. seq2seq 모델의 목표는 가변 길이 시퀀스를 입력으로 받고,\n","크기가 고정된 모델을 이용하여, 가변 길이 시퀀스를 출력으로 반환하는\n","것입니다.\n","\n","`Sutskever 등 <https://arxiv.org/abs/1409.3215>`__ 은 두 개의 독립된\n","순환 신경망을 같이 이용하여 이러한 목적을 달성할 수 있음을 발견했습니다.\n","RNN 하나는 **인코더** 로, 가변 길이 입력 시퀀스를 고정된 길이의 문맥\n","벡터(context vector)로 인코딩합니다. 이론상 문맥 벡터(RNN의 마지막\n","은닉 레이어)는 봇에게 입력으로 주어지는 질의 문장에 대한 의미론적 정보를\n","담고 있을 것입니다. 두 번째 RNN은 **디코더** 입니다. 디코더는 단어 하나와\n","문맥 벡터를 입력으로 받고, 시퀀스의 다음 단어가 무엇일지를 추론하여\n","반환하며, 다음 단계에서 사용할 은닉 상태도 같이 반환합니다.\n","\n",".. figure:: /_static/img/chatbot/seq2seq_ts.png\n","   :align: center\n","   :alt: model\n","\n","그림 출처:\n","https://jeddy92.github.io/JEddy92.github.io/ts_seq2seq_intro/\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"p7-BRz-XVv6J","colab_type":"text"},"source":["인코더\n","~~~~~~\n","\n","인코더 RNN은 입력 시퀀스를 토큰 단위로(예를 들어, 단어 단위로) 한번에\n","하나씩 살펴보며 진행합니다. 그리고 각 단계마다 \"출력\" 벡터와 \"은닉\n","상태\" 벡터를 반환합니다. 은닉 상태 벡터는 다음 단계를 진행할 때 같이\n","사용되며, 출력 벡터는 차례대로 기록됩니다. 인코더는 시퀀스의 각 지점에\n","대해 파악한 문맥을 고차원 공간에 있는 점들의 집합으로 변환합니다.\n","나중에 디코더는 이를 이용하여 주어진 문제에 대해 의미 있는 출력을\n","구할 것입니다.\n","\n","인코더의 핵심 부분에는 다중 레이어 게이트 순환 유닛(multi-layered Gated\n","Recurrent Unit)이 있습니다. 이는 `Cho 등 <https://arxiv.org/pdf/1406.1078v3.pdf>`__\n","이 2014년에 고안한 것입니다. 우리는 GRU를 양방향으로 변환한 형태를\n","사용할 것이며, 이는 본질적으로 두 개의 독립된 RNN이 존재한다는\n","의미입니다. 하나는 입력 시퀀스를 원래 시퀀스에서의 순서로 처리하며,\n","다른 하나는 입력 시퀀스를 역순으로 처리합니다. 단계마다 각 네트워크의\n","출력을 합산합니다. 양방향 GRU를 사용하면 과거와 미래의 문맥을 함께\n","인코딩할 수 있다는 장점이 있습니다.\n","\n","양방향 RNN:\n","\n",".. figure:: /_static/img/chatbot/RNN-bidirectional.png\n","   :width: 70%\n","   :align: center\n","   :alt: rnn_bidir\n","\n","그림 출처: https://colah.github.io/posts/2015-09-NN-Types-FP/\n","\n","``embedding`` 레이어가 단어 인덱스를 임의 크기의 피처 공간으로\n","인코딩하는 데 사용되었음에 유의하기 바랍니다. 우리의 모델에서는 이\n","레이어가 각 단어를 크기가 *hidden_size* 인 피처 공간으로 매핑할\n","것입니다. 학습을 거치면 서로 뜻이 유사한 단어는 의미적으로 유사하게\n","인코딩될 것입니다.\n","\n","마지막으로, RNN 모듈에 패딩된 배치를 보내려면 RNN과 연결된 부분에서\n","패킹 및 언패킹하는 작업을 수행해야 합니다. 각각은\n","``nn.utils.rnn.pack_padded_sequence`` 와\n","``nn.utils.rnn.pad_packed_sequence`` 를 통해 수행할 수 있습니다.\n","\n","**계산 그래프:**\n","\n","   1) 단어 인덱스를 임베딩으로 변환합니다.\n","   2) RNN 모듈을 위한 패딩된 배치 시퀀스를 패킹합니다.\n","   3) GRU로 포워드 패스를 수행합니다.\n","   4) 패딩을 언패킹합니다.\n","   5) 양방향 GRU의 출력을 합산합니다.\n","   6) 출력과 마지막 은닉 상태를 반환합니다.\n","\n","**입력:**\n","\n","-  ``input_seq``: 입력 시퀀스 배치. shape=\\ *(max_length,\n","   batch_size)*\n","-  ``input_lengths``: 배치에 포함된 각 문장의 길이로 구성된 리스트.\n","   shape=\\ *(batch_size)*\n","-  ``hidden``: 은닉 상태. shape=\\ *(n_layers x num_directions,\n","   batch_size, hidden_size)*\n","\n","**출력:**\n","\n","-  ``outputs``: GRU의 마지막 은닉 레이어에 대한 출력 피처 값(양방향\n","   (출력을 합산한 것). shape=\\ *(max_length, batch_size, hidden_size)*\n","-  ``hidden``: GRU의 최종 은닉 상태. shape=\\ *(n_layers x\n","   num_directions, batch_size, hidden_size)*\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"G_iuAnWOVv6M","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769053783,"user_tz":-540,"elapsed":658,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["class EncoderRNN(nn.Module):\n","    def __init__(self, hidden_size, embedding, n_layers=1, dropout=0):\n","        super(EncoderRNN, self).__init__()\n","        self.n_layers = n_layers\n","        self.hidden_size = hidden_size\n","        self.embedding = embedding\n","\n","        # GRU를 초기화합니다. input_size와 hidden_size 패러미터는 둘 다 'hidden_size'로\n","        # 둡니다. 이는 우리 입력의 크기가 hideen_size 만큼의 피처를 갖는 단어 임베딩이기\n","        # 때문입니다.\n","        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,\n","                          dropout=(0 if n_layers == 1 else dropout), bidirectional=True)\n","\n","    def forward(self, input_seq, input_lengths, hidden=None):\n","        # 단어 인덱스를 임베딩으로 변환합니다\n","        embedded = self.embedding(input_seq)\n","        # RNN 모듈을 위한 패딩된 배치 시퀀스를 패킹합니다\n","        packed = nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)\n","        # GRU로 포워드 패스를 수행합니다\n","        outputs, hidden = self.gru(packed, hidden)\n","        # 패딩을 언패킹합니다\n","        outputs, _ = nn.utils.rnn.pad_packed_sequence(outputs)\n","        # 양방향 GRU의 출력을 합산합니다\n","        outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]\n","        # 출력과 마지막 은닉 상태를 반환합니다\n","        return outputs, hidden"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UjaUZbyaVv6S","colab_type":"text"},"source":["디코더\n","~~~~~~\n","\n","디코더 RNN은 토큰 단위로 응답 문장을 생성하는 역할을 수행합니다. 이때\n","인코더의 문백 벡터를 사용하며, 내부 은닉 상태에 따라 시퀀스의 다음\n","단어를 생성하게 됩니다. 디코더는 *EOS_token*, 즉 문장의 끝을 나타내는\n","토큰을 출력할 때까지 계속 단어를 생성합니다. 원래의 seq2seq 디코더에는\n","알려진 문제점이 있습니다. 만약 우리가 입력 시퀀스의 의미를 인코딩할\n","때 문맥 벡터에만 전적으로 의존한다면, 그 과정 중에 정보 손실이 일어날\n","가능성이 높다는 것입니다. 이는 특히 입력 시퀀스의 길이가 길 때 그러하며,\n","이 때문에 디코더의 기능이 크게 제한될 수 있습니다.\n","\n","이를 해결하기 위한 방편으로, `Bahdanau 등\n","<https://arxiv.org/abs/1409.0473>`__ 은 '어텐션 메커니즘'을\n","고안했습니다. 이는 디코더가 매 단계에 대해 고정된 문맥을 계속 사용하는\n","것이 아니라, 입력 시퀀스의 특정 부분에 집중하게 하는 방식입니다.\n","\n","높은 차원에서 이야기 하자면, 어텐션은 디코더의 현재 은닉 상태와 인코더의\n","출력을 바탕으로 계산됩니다. 출력되는 어텐션 가중치는 입력 시퀀스와\n","동일한 모양을 가집니다. 따라서 이를 인코더의 출력과 곱할 수 있고, 그\n","결과로 얻게 되는 가중치 합은 인코더의 출력에서 어느 부분에 집중해야\n","할지를 알려줍니다. `Sean Robertson <https://github.com/spro>`__\n","의 그림에 이러한 내용이 잘 설명되어 있습니다.\n","\n",".. figure:: /_static/img/chatbot/attn2.png\n","   :align: center\n","   :alt: attn2\n","\n","`Luong 등 <https://arxiv.org/abs/1508.04025>`__ 은 Bahdanau의 기초 연구를\n","더욱 발전시킨 '전역(global) 어텐션'을 제안했습니다. '전역 어텐션'의\n","핵심적인 차이점은 인코더의 은닉 상태를 모두 고려한다는 점입니다. 이는\n","Bahdanau 등의 '지역(local) 어텐션' 방식이 현재 시점에 대한 인코더의\n","은닉 상태만을 고려한다는 점과 다른 부분입니다. '전역 어텐션'의 또 다른\n","차이점은 어텐션에 대한 가중치, 혹은 에너지를 계산할 때 현재 시점에 대한\n","디코더의 은닉 상태만을 사용한다는 점입니다. Bahdanau 등은 어텐션을\n","계산할 때 디코더의 이전 단계 상태에 대한 정보를 활용합니다. 또한 Luong 등의\n","방법에서는 인코더의 출력과 디코더의 출력에 대한 어텐션 에너지를 계산하는\n","방법을 제공하며, 이를 '점수 함수(score function)'라 부릅니다.\n","\n",".. figure:: /_static/img/chatbot/scores.png\n","   :width: 60%\n","   :align: center\n","   :alt: scores\n","\n","이때 $h_t$ 는 목표 디코더의 현재 상태를, $\\bar{h}_s$ 는 인코더의\n","모든 상태를 뜻합니다.\n","\n","종합해 보면, 전역 어텐션 메커니즘을 다음 그림과 같이 요약할 수 있을\n","것입니다. 우리가 '어텐션 레이어'를 ``Attn`` 라는 독립적인 ``nn.Module`` 로\n","구현할 것임에 유의하기 바랍니다. 이 모듈의 출력은 모양이 *(batch_size, 1,\n","max_length)* 인 정규화된 softmax 가중치 텐서입니다.\n","\n",".. figure:: /_static/img/chatbot/global_attn.png\n","   :align: center\n","   :width: 60%\n","   :alt: global_attn\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"qAKEpfcCVv6T","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769059670,"user_tz":-540,"elapsed":671,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["# Luong 어텐션 레이어\n","class Attn(nn.Module):\n","    def __init__(self, method, hidden_size):\n","        super(Attn, self).__init__()\n","        self.method = method\n","        if self.method not in ['dot', 'general', 'concat']:\n","            raise ValueError(self.method, \"is not an appropriate attention method.\")\n","        self.hidden_size = hidden_size\n","        if self.method == 'general':\n","            self.attn = nn.Linear(self.hidden_size, hidden_size)\n","        elif self.method == 'concat':\n","            self.attn = nn.Linear(self.hidden_size * 2, hidden_size)\n","            self.v = nn.Parameter(torch.FloatTensor(hidden_size))\n","\n","    def dot_score(self, hidden, encoder_output):\n","        return torch.sum(hidden * encoder_output, dim=2)\n","\n","    def general_score(self, hidden, encoder_output):\n","        energy = self.attn(encoder_output)\n","        return torch.sum(hidden * energy, dim=2)\n","\n","    def concat_score(self, hidden, encoder_output):\n","        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(0), -1, -1), encoder_output), 2)).tanh()\n","        return torch.sum(self.v * energy, dim=2)\n","\n","    def forward(self, hidden, encoder_outputs):\n","        # Attention 가중치(에너지)를 제안된 방법에 따라 계산합니다\n","        if self.method == 'general':\n","            attn_energies = self.general_score(hidden, encoder_outputs)\n","        elif self.method == 'concat':\n","            attn_energies = self.concat_score(hidden, encoder_outputs)\n","        elif self.method == 'dot':\n","            attn_energies = self.dot_score(hidden, encoder_outputs)\n","\n","        # max_length와 batch_size의 차원을 뒤집습니다\n","        attn_energies = attn_energies.t()\n","\n","        # 정규화된 softmax 확률 점수를 반환합니다 (차원을 늘려서)\n","        return F.softmax(attn_energies, dim=1).unsqueeze(1)"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oS_ED51hVv6Y","colab_type":"text"},"source":["이처럼 어텐션 서브모듈을 정의하고 나면 실제 디코더 모델을 구현할 수\n","있게 됩니다. 디코더에 대해서는 매 시간마다 배치를 하나씩 수동으로\n","제공하려 합니다. 이는 임베딩된 단어 텐서와 GRU 출력의 모양이 둘 다\n","*(1, batch_size, hidden_size)* 라는 의미입니다.\n","\n","**계산 그래프:**\n","\n","   1) 현재의 입력 단어에 대한 임베딩을 구합니다.\n","   2) 무방향 GRU로 포워드 패스를 수행합니다.\n","   3) (2)에서 구한 현재의 GRU 출력을 바탕으로 어텐션 가중치를 계산합니다.\n","   4) 인코더 출력에 어텐션을 곱하여 새로운 \"가중치 합\" 문백 벡터를 구합니다.\n","   5) Luong의 논문에 나온 식 5를 이용하여 가중치 문백 벡터와 GRU 출력을 결합합니다.\n","   6) Luong의 논문에 나온 식 6을 이용하여(softmax 없이) 다음 단어를 예측합니다.\n","   7) 출력과 마지막 은닉 상태를 반환합니다.\n","\n","**입력:**\n","\n","-  ``input_step``: 입력 시퀀스 배치에 대한 한 단위 시간(한 단어).\n","   shape=\\ *(1, batch_size)*\n","-  ``last_hidden``: GRU의 마지막 은닉 레이어. shape=\\ *(n_layers x\n","   num_directions, batch_size, hidden_size)*\n","-  ``encoder_outputs``: 인코더 모델의 출력. shape=\\ *(max_length,\n","   batch_size, hidden_size)*\n","\n","**출력:**\n","\n","-  ``output``: 각 단어가 디코딩된 시퀀스에서 다음 단어로 사용되었을\n","   때 적합할 확률을 나타내는 정규화된 softmax 텐서.\n","   shape=\\ *(batch_size, voc.num_words)*\n","-  ``hidden``: GRU의 마지막 은닉 상태. shape=\\ *(n_layers x\n","   num_directions, batch_size, hidden_size)*\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"CT1pgExdVv6a","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769063684,"user_tz":-540,"elapsed":725,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["class LuongAttnDecoderRNN(nn.Module):\n","    def __init__(self, attn_model, embedding, hidden_size, output_size, n_layers=1, dropout=0.1):\n","        super(LuongAttnDecoderRNN, self).__init__()\n","\n","        # 참조를 보존해 둡니다\n","        self.attn_model = attn_model\n","        self.hidden_size = hidden_size\n","        self.output_size = output_size\n","        self.n_layers = n_layers\n","        self.dropout = dropout\n","\n","        # 레이어를 정의합니다\n","        self.embedding = embedding\n","        self.embedding_dropout = nn.Dropout(dropout)\n","        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(0 if n_layers == 1 else dropout))\n","        self.concat = nn.Linear(hidden_size * 2, hidden_size)\n","        self.out = nn.Linear(hidden_size, output_size)\n","\n","        self.attn = Attn(attn_model, hidden_size)\n","\n","    def forward(self, input_step, last_hidden, encoder_outputs):\n","        # 주의: 한 단위 시간에 대해 한 단계(단어)만을 수행합니다\n","        # 현재의 입력 단어에 대한 임베딩을 구합니다\n","        embedded = self.embedding(input_step)\n","        embedded = self.embedding_dropout(embedded)\n","        # 무방향 GRU로 포워드 패스를 수행합니다\n","        rnn_output, hidden = self.gru(embedded, last_hidden)\n","        # 현재의 GRU 출력을 바탕으로 어텐션 가중치를 계산합니다\n","        attn_weights = self.attn(rnn_output, encoder_outputs)\n","        # 인코더 출력에 어텐션을 곱하여 새로운 \"가중치 합\" 문백 벡터를 구합니다\n","        context = attn_weights.bmm(encoder_outputs.transpose(0, 1))\n","        # Luong의 논문에 나온 식 5를 이용하여 가중치 문백 벡터와 GRU 출력을 결합합니다\n","        rnn_output = rnn_output.squeeze(0)\n","        context = context.squeeze(1)\n","        concat_input = torch.cat((rnn_output, context), 1)\n","        concat_output = torch.tanh(self.concat(concat_input))\n","        # Luong의 논문에 나온 식 6을 이용하여 다음 단어를 예측합니다\n","        output = self.out(concat_output)\n","        output = F.softmax(output, dim=1)\n","        # 출력과 마지막 은닉 상태를 반환합니다\n","        return output, hidden"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2ozttVVqVv6g","colab_type":"text"},"source":["학습 프로시저 정의하기\n","----------------------\n","\n","Masked loss\n","~~~~~~~~~~~\n","\n","우리는 패딩된 시퀀스 배치를 다루기 때문에 손실을 계산할 때 단순히 텐서의\n","모든 원소를 고려할 수는 없습니다. 우리는 ``maskNLLLoss`` 를 정의하여\n","디코더의 출력 텐서, 목표 텐서, 이진 마스크 텐서를 바탕으로 손실을 계산하려\n","합니다. 이 손실 함수에서는 마스크 텐서의 *1* 에 대응하는 원소에 대한 음의\n","로그 우도 값의 평균을 계산합니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"RQYJcC-rVv6j","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769068382,"user_tz":-540,"elapsed":659,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["def maskNLLLoss(inp, target, mask):\n","    nTotal = mask.sum()\n","    crossEntropy = -torch.log(torch.gather(inp, 1, target.view(-1, 1)).squeeze(1))\n","    loss = crossEntropy.masked_select(mask).mean()\n","    loss = loss.to(device)\n","    return loss, nTotal.item()"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Sk8_SiCOVv6p","colab_type":"text"},"source":["한 번의 학습 단계\n","~~~~~~~~~~~~~~~~~\n","\n","``train`` 함수에 학습을 한 단계(입력 배치 한 개에 대한) 진행하는 알고리즘이\n","나와 있습니다.\n","\n","우리는 수렴이 잘 되도록 몇 가지 영리한 전략을 사용해보려 합니다.\n","\n","-  첫 번째 전략은 **teacher forcing** 을 사용하는 것입니다. 이는\n","   ``teacher_forcing_ratio`` 로 정의된 확률에 따라, 디코더의 이번 단계\n","   예측값 대신에 현재의 목표 단어를 디코더의 다음 입력 값으로 활용하는\n","   것입니다. 이 기법은 디코더의 보조 바퀴처럼 작용하여 효율적으로 학습될 수\n","   있게 도와 줍니다. 하지만 teacher forcing 기법은 추론 과정에서 모델이\n","   불안정 해지도록 할 수도 있는데, 이는 디코더가 학습 과정에서 자신의 출력\n","   시퀀스를 직접 만들어 볼 기회를 충분히 제공받지 못할 수 있기 때문입니다.\n","   따라서 우리는 ``teacher_forcing_ratio`` 를 어떻게 설정해 두었는지에\n","   주의를 기울여야 하며, 수렴이 빨리 되었다고 속아 넘어가서는 안 됩니다.\n","\n","-  우리가 구현한 두 번째 전략은 **gradient clipping** 입니다. 이는 소위\n","   '그라디언트 폭발' 문제를 해결하기 위해 널리 사용되는 기법입니다. 핵심은\n","   그라디언트를 클리핑 하거나 임계값을 둠으로써, 그라디언트가 지수\n","   함수적으로 증가하거나 오버플로를 일으키는(NaN) 경우를 막고, 비용 함수의\n","   급격한 경사를 피하겠다는 것입니다.\n","\n",".. figure:: /_static/img/chatbot/grad_clip.png\n","   :align: center\n","   :width: 60%\n","   :alt: grad_clip\n","\n","그림 출처: Goodfellow 등 저. *Deep Learning*. 2016. https://www.deeplearningbook.org/\n","\n","**작업 절차:**\n","\n","   1) 전체 입력 배치에 대하여 인코더로 포워드 패스를 수행합니다.\n","   2) 디코더의 입력을 SOS_token로, 은닉 상태를 인코더의 마지막 은닉 상태로 초기화합니다.\n","   3) 입력 배치 시퀀스를 한 번에 하나씩 디코더로 포워드 패스합니다.\n","   4) Teacher forcing을 사용하는 경우, 디코더의 다음 입력을 현재의 목표로 둡니다. 그렇지 않으면 디코더의 다음 입력을 현재 디코더의 출력으로 둡니다.\n","   5) 손실을 계산하고 누적합니다.\n","   6) 역전파를 수행합니다.\n","   7) 그라디언트를 클리핑 합니다.\n","   8) 인코더 및 디코더 모델의 패러미터를 갱신합니다.\n","\n","\n","<div class=\"alert alert-danger\"><h4>Warning</h4><p>PyTorch의 RNN 모듈(``RNN``, ``LSTM``, ``GRU``)은 전체 입력 시퀀스(또는\n","  시퀀스의 배치)를 단순히 넣어주기만 하면 다른 비순환 레이어처럼 사용할 수\n","  있습니다. 우리는 ``encoder`` 에서 ``GRU`` 레이어를 이런 식으로 사용합니다.\n","  그 안이 실제로 어떻게 되어 있는지를 살펴보면, 매 시간 단계마다 은닉 상태를\n","  계산하는 반복 프로세스가 존재합니다. 또 다른 방법은, 이 모듈을 매번 한 단위\n","  시간만큼 수행할 수도 있습니다. 그 경우에는 우리가 ``decoder`` 모델을 다룰\n","  때처럼, 학습 과정에서 수동으로 시퀀스에 대해 반복 작업을 수행해 주어야\n","  합니다. 이 모듈에 대해 모델의 개념을 확실히 갖고만 있다면, 순차 모델을\n","  구현하는 것도 매우 단순할 것입니다.</p></div>\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"7ZrwZUt7Vv6r","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769073470,"user_tz":-540,"elapsed":672,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["def train(input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,\n","          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH):\n","\n","    # 제로 그라디언트\n","    encoder_optimizer.zero_grad()\n","    decoder_optimizer.zero_grad()\n","\n","    # device 옵션을 설정합니다\n","    input_variable = input_variable.to(device)\n","    lengths = lengths.to(device)\n","    target_variable = target_variable.to(device)\n","    mask = mask.to(device)\n","\n","    # 변수를 초기화합니다\n","    loss = 0\n","    print_losses = []\n","    n_totals = 0\n","\n","    # 인코더로 포워드 패스를 수행합니다\n","    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)\n","\n","    # 초기 디코더 입력을 생성합니다(각 문장을 SOS 도큰으로 시작합니다)\n","    decoder_input = torch.LongTensor([[SOS_token for _ in range(batch_size)]])\n","    decoder_input = decoder_input.to(device)\n","\n","    # 디코더의 초기 은닉 상태를 인코더의 마지막 은닉 상태로 둡니다\n","    decoder_hidden = encoder_hidden[:decoder.n_layers]\n","\n","    # 이번 반복에서 teacher forcing을 사용할지를 결정합니다\n","    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False\n","\n","    # 배치 시퀀스를 한 번에 하나씩 디코더로 포워드 패스합니다\n","    if use_teacher_forcing:\n","        for t in range(max_target_len):\n","            decoder_output, decoder_hidden = decoder(\n","                decoder_input, decoder_hidden, encoder_outputs\n","            )\n","            # Teacher forcing 사용: 다음 입력을 현재의 목표로 둡니다\n","            decoder_input = target_variable[t].view(1, -1)\n","            # 손실을 계산하고 누적합니다\n","            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n","            loss += mask_loss\n","            print_losses.append(mask_loss.item() * nTotal)\n","            n_totals += nTotal\n","    else:\n","        for t in range(max_target_len):\n","            decoder_output, decoder_hidden = decoder(\n","                decoder_input, decoder_hidden, encoder_outputs\n","            )\n","            # Teacher forcing 미사용: 다음 입력을 디코더의 출력으로 둡니다\n","            _, topi = decoder_output.topk(1)\n","            decoder_input = torch.LongTensor([[topi[i][0] for i in range(batch_size)]])\n","            decoder_input = decoder_input.to(device)\n","            # 손실을 계산하고 누적합니다\n","            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n","            loss += mask_loss\n","            print_losses.append(mask_loss.item() * nTotal)\n","            n_totals += nTotal\n","\n","    # 역전파를 수행합니다\n","    loss.backward()\n","\n","    # 그라디언트 클리핑: 그라디언트를 제자리에서 수정합니다\n","    _ = nn.utils.clip_grad_norm_(encoder.parameters(), clip)\n","    _ = nn.utils.clip_grad_norm_(decoder.parameters(), clip)\n","\n","    # 모델의 가중치를 수정합니다\n","    encoder_optimizer.step()\n","    decoder_optimizer.step()\n","\n","    return sum(print_losses) / n_totals"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nbj3tGkpVv6w","colab_type":"text"},"source":["학습 단계\n","~~~~~~~~~\n","\n","이제 마지막으로 전체 학습 프로시저와 데이터를 하나로 엮을 때가\n","되었습니다. ``trainIters`` 함수는 주어진 모델, optimizer, 데이터 등을\n","토대로 학습을 ``n_iterations`` 번의 단계만큼 진행하는 역할을 담당합니다.\n","이 함수는 자기 자신을 살 설명하고 있는 편인데, 무거운 작업을 ``train``\n","함수에 옮겨 놓았기 때문입니다.\n","\n","한 가지 주의할 점은 우리가 모델을 저장하려 할 때, 인코더와 디코더의\n","state_dicts (패러미터), optimizer의 state_dicts, 손실, 진행 단계 수\n","등을 tarball로 만들어 저장한다는 점입니다. 모델을 이러한 방식으로\n","저장하면 checkpoint에 대해 아주 높은 수준의 유연성을 확보할 수 있게\n","됩니다. Checkpoint를 불러오고 나면, 우리는 모델 패러미터를 이용하여\n","예측을 진행할 수도 있고, 이전에 멈췄던 부분부터 학습을 계속  진행할\n","수도 있게 됩니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"OiQFZFtcVv6z","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769078225,"user_tz":-540,"elapsed":635,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["def trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer, embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size, print_every, save_every, clip, corpus_name, loadFilename):\n","\n","    # 각 단계에 대한 배치를 읽어옵니다\n","    training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n","                      for _ in range(n_iteration)]\n","\n","    # 초기화\n","    print('Initializing ...')\n","    start_iteration = 1\n","    print_loss = 0\n","    if loadFilename:\n","        start_iteration = checkpoint['iteration'] + 1\n","\n","    # 학습 루프\n","    print(\"Training...\")\n","    for iteration in range(start_iteration, n_iteration + 1):\n","        training_batch = training_batches[iteration - 1]\n","        # 배치에서 각 필드를 읽어옵니다\n","        input_variable, lengths, target_variable, mask, max_target_len = training_batch\n","\n","        # 배치에 대해 학습을 한 단계 진행합니다\n","        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,\n","                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)\n","        print_loss += loss\n","\n","        # 경과를 출력합니다\n","        if iteration % print_every == 0:\n","            print_loss_avg = print_loss / print_every\n","            print(\"Iteration: {}; Percent complete: {:.1f}%; Average loss: {:.4f}\".format(iteration, iteration / n_iteration * 100, print_loss_avg))\n","            print_loss = 0\n","\n","        # Checkpoint를 저장합니다\n","        if (iteration % save_every == 0):\n","            directory = os.path.join(save_dir, model_name, corpus_name, '{}-{}_{}'.format(encoder_n_layers, decoder_n_layers, hidden_size))\n","            if not os.path.exists(directory):\n","                os.makedirs(directory)\n","            torch.save({\n","                'iteration': iteration,\n","                'en': encoder.state_dict(),\n","                'de': decoder.state_dict(),\n","                'en_opt': encoder_optimizer.state_dict(),\n","                'de_opt': decoder_optimizer.state_dict(),\n","                'loss': loss,\n","                'voc_dict': voc.__dict__,\n","                'embedding': embedding.state_dict()\n","            }, os.path.join(directory, '{}_{}.tar'.format(iteration, 'checkpoint')))"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JKCH3SOKVv67","colab_type":"text"},"source":["평가 정의하기\n","-------------\n","\n","모델을 학습시키고 나면 직접 봇과 대화를 나눠보고 싶어질 것입니다. 그러려면\n","먼저 모델이 인코딩된 입력을 어떻게 디코딩할지를 정의해줘야 합니다.\n","\n","탐욕적 디코딩\n","~~~~~~~~~~~~~\n","\n","탐욕적 디코딩(Greedy decoding)은 우리가 학습 단계에서 teacher forcing을\n","적용하지 않았을 때 사용한 디코딩 방법입니다. 달리 말하면, 각 단계에 대해\n","단순히 ``decoder_output`` 에서 가장 높은 softmax값을 갖는 단어를 선택하는\n","방식입니다. 이 디코딩 방법은 한 번의 단계에 대해서는 최적입니다.\n","\n","우리는 탐욕적 디코딩 연산을 수행할 수 있도록 ``GreedySearchDecoder``\n","클래스를 만들었습니다. 수행 과정에서 이 클래스의 인스턴스는 모양이\n","*(input_seq length, 1)* 인 입력 시퀀스(``input_seq``), 조종할 입력\n","길이(``input_length``) 텐서, 그리고 응답 문장 길이의 제한을 나타내는\n","``max_length`` 를 입력으로 받습니다. 입력 시퀀서는 다음과 같은 계산 그래프에\n","의해 평가됩니다.\n","\n","**계산 그래프:**\n","\n","   1) 인코더 모델로 입력을 포워드 패스합니다.\n","   2) 인코더의 마지막 은닉 레이어가 디코더의 첫 번째 은닉 레이어의 입력이 되도록 준비합니다.\n","   3) 디코더의 첫 번째 입력을 SOS_token으로 초기화합니다.\n","   4) 디코더가 단어를 덧붙여 나갈 텐서를 초기화합니다.\n","   5) 반복적으로 각 단계마다 하나의 단어 토큰을 디코딩합니다.\n","       a) 디코더로의 포워드 패스를 수행합니다.\n","       b) 가장 가능성 높은 단어 토큰과 그 softmax 점수를 구합니다.\n","       c) 토큰과 점수를 기록합니다.\n","       d) 현재의 토큰을 디코더의 다음 입력으로 준비시킵니다.\n","   6) 단어 토큰과 점수를 모아서 반환합니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"cqQbvspICkgG","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593770448017,"user_tz":-540,"elapsed":673,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["class BeamSearchNode(nn.Module):\n","    def __init__(self, hiddenstate, previousNode, wordId, logProb, length):\n","        '''\n","        :param hiddenstate:\n","        :param previousNode:\n","        :param wordId:\n","        :param logProb:\n","        :param length:\n","        '''\n","        self.h = hiddenstate\n","        self.prevNode = previousNode\n","        self.wordid = wordId\n","        self.logp = logProb\n","        self.leng = length\n","\n","    def eval(self, alpha=1.0):\n","        reward = 0\n","        # Add here a function for shaping a reward\n","\n","        return self.logp / float(self.leng - 1 + 1e-6) + alpha * reward\n","\n","\n","\n","\n","\n","def beam_decode(target_tensor, decoder_hiddens, encoder_outputs=None):\n","    '''\n","    :param target_tensor: target indexes tensor of shape [B, T] where B is the batch size and T is the maximum length of the output sentence\n","    :param decoder_hidden: input tensor of shape [1, B, H] for start of the decoding\n","    :param encoder_outputs: if you are using attention mechanism you can pass encoder outputs, [T, B, H] where T is the maximum length of input sentence\n","    :return: decoded_batch\n","    '''\n","\n","    beam_width = 10\n","    topk = 1  # how many sentence do you want to generate\n","    decoded_batch = []\n","\n","    # decoding goes sentence by sentence\n","    for idx in range(target_tensor.size(0)):\n","        if isinstance(decoder_hiddens, tuple):  # LSTM case\n","            decoder_hidden = (decoder_hiddens[0][:,idx, :].unsqueeze(0),decoder_hiddens[1][:,idx, :].unsqueeze(0))\n","        else:\n","            decoder_hidden = decoder_hiddens[:, idx, :].unsqueeze(0)\n","        encoder_output = encoder_outputs[:,idx, :].unsqueeze(1)\n","\n","        # Start with the start of the sentence token\n","        decoder_input = torch.LongTensor([[SOS_token]], device=device)\n","\n","        # Number of sentence to generate\n","        endnodes = []\n","        number_required = min((topk + 1), topk - len(endnodes))\n","\n","        # starting node -  hidden vector, previous node, word id, logp, length\n","        node = BeamSearchNode(decoder_hidden, None, decoder_input, 0, 1)\n","        nodes = PriorityQueue()\n","\n","        # start the queue\n","        nodes.put((-node.eval(), node))\n","        qsize = 1\n","\n","        # start beam search\n","        while True:\n","            # give up when decoding takes too long\n","            if qsize > 2000: break\n","\n","            # fetch the best node\n","            score, n = nodes.get()\n","            decoder_input = n.wordid\n","            decoder_hidden = n.h\n","\n","            if n.wordid.item() == EOS_token and n.prevNode != None:\n","                endnodes.append((score, n))\n","                # if we reached maximum # of sentences required\n","                if len(endnodes) >= number_required:\n","                    break\n","                else:\n","                    continue\n","\n","            # decode for one step using decoder\n","            decoder_output, decoder_hidden = decoder(decoder_input, decoder_hidden, encoder_output)\n","\n","            # PUT HERE REAL BEAM SEARCH OF TOP\n","            log_prob, indexes = torch.topk(decoder_output, beam_width)\n","            nextnodes = []\n","\n","            for new_k in range(beam_width):\n","                decoded_t = indexes[0][new_k].view(1, -1)\n","                log_p = log_prob[0][new_k].item()\n","\n","                node = BeamSearchNode(decoder_hidden, n, decoded_t, n.logp + log_p, n.leng + 1)\n","                score = -node.eval()\n","                nextnodes.append((score, node))\n","\n","            # put them into queue\n","            for i in range(len(nextnodes)):\n","                score, nn = nextnodes[i]\n","                nodes.put((score, nn))\n","                # increase qsize\n","            qsize += len(nextnodes) - 1\n","\n","        # choose nbest paths, back trace them\n","        if len(endnodes) == 0:\n","            endnodes = [nodes.get() for _ in range(topk)]\n","\n","        utterances = []\n","        for score, n in sorted(endnodes, key=operator.itemgetter(0)):\n","            utterance = []\n","            utterance.append(n.wordid)\n","            # back trace\n","            while n.prevNode != None:\n","                n = n.prevNode\n","                utterance.append(n.wordid)\n","\n","            utterance = utterance[::-1]\n","            utterances.append(utterance)\n","\n","        decoded_batch.append(utterances)\n","\n","    return decoded_batch\n"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"TV9B6-siVv68","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593770289121,"user_tz":-540,"elapsed":736,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["class GreedySearchDecoder(nn.Module):\n","    def __init__(self, encoder, decoder):\n","        super(GreedySearchDecoder, self).__init__()\n","        self.encoder = encoder\n","        self.decoder = decoder\n","\n","    def forward(self, input_seq, input_length, max_length):\n","        # 인코더 모델로 입력을 포워드 패스합니다\n","        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)\n","        # 인코더의 마지막 은닉 레이어가 디코더의 첫 번째 은닉 레이어의 입력이 되도록 준비합니다\n","        decoder_hidden = encoder_hidden[:decoder.n_layers]\n","        # 디코더의 첫 번째 입력을 SOS_token으로 초기화합니다\n","        decoder_input = torch.ones(1, 1, device=device, dtype=torch.long) * SOS_token\n","        # 디코더가 단어를 덧붙여 나갈 텐서를 초기화합니다\n","        all_tokens = torch.zeros([0], device=device, dtype=torch.long)\n","        all_scores = torch.zeros([0], device=device)\n","        # 반복적으로 각 단계마다 하나의 단어 토큰을 디코딩합니다\n","        for _ in range(max_length):\n","            # 디코더로의 포워드 패스를 수행합니다\n","            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden, encoder_outputs)\n","            # 가장 가능성 높은 단어 토큰과 그 softmax 점수를 구합니다\n","            decoder_scores, decoder_input = torch.max(decoder_output, dim=1)\n","            #print(\"scores: \",decoder_scores)\n","            # 토큰과 점수를 기록합니다\n","            all_tokens = torch.cat((all_tokens, decoder_input), dim=0)\n","            all_scores = torch.cat((all_scores, decoder_scores), dim=0)\n","            # 현재의 토큰을 디코더의 다음 입력으로 준비시킵니다(차원을 증가시켜서)\n","            decoder_input = torch.unsqueeze(decoder_input, 0)\n","        # 단어 토큰과 점수를 모아서 반환합니다\n","        #print(\"all tokens= \",all_tokens,\" all scores= \",all_scores)\n","      #  return all_tokens, all_scores\n","        return encoder_outputs\n","\n","\n"],"execution_count":41,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D7XCH6z8Vv7D","colab_type":"text"},"source":["내 텍스트 평가하기\n","~~~~~~~~~~~~~~~~~~\n","\n","이제 디코딩 모델을 정의했으니, 문자열로 된 입력 시퀀스를 평가하는 함수를\n","작성해볼 수 있을 것입니다. ``evaluate`` 함수에 입력 시퀀스를 낮은\n","레벨에서 어떻게 처리할지가 나와 있습니다. 우리는 먼저 문장을\n","*batch_size==1* 이고 단어 인덱스로 구성된 입력 배치 형태로 만듭니다.\n","이를 위해 문장의 각 단어를 그에 대응하는 인덱스로 변환하고, 차원을\n","뒤집어서 모델에 맞는 입력 형태로 변환합니다. 우리는 입력 시퀀스의 길이를\n","저장하고 있는 ``lengths`` 텐서도 만듭니다. 이 경우에는 ``lengths`` 가\n","스칼라 값이 되는데, 우리는 한 번에 한 문장만 평가하기 때문입니다(batch_size==1).\n","다음으로는 ``GreedySearchDecoder`` 의 객체(``searcher``)를 이용하여\n","응답 문장 텐서를 디코딩합니다. 마지막으로, 응답 인덱스를 단어로 변환하고\n","디코딩된 단어의 리스트를 반환합니다.\n","\n","``evaluateInput`` 은 우리의 챗봇에 대한 인터페이스 역할을 수행합니다.\n","이를 호출하면 입력 텍스트 필드가 생성되는데, 거기에 우리의 질의 문장을\n","입력해볼 수 있습니다. 입력 문장을 타이핑하고 *엔터* 를 누르면, 입력한\n","텍스트가 학습 데이터와 같은 방식으로 정규화되고, 최종적으로는 ``evaluate``\n","함수에 입력으로 제공되어 디코딩된 출력 문장을 구하게 됩니다. 우리는\n","이러한 과정을 계속 반복하며, 이를 통해 'q'나 'quit'를 입력하기 전까지는\n","계속 채팅할 수 있습니다.\n","\n","마지막으로, 만약 어휘집에 포함되어 있지 않은 단어를 포함하고 있는 문장이\n","입력되더라도 이를 예의 바르게 처리합니다. 즉 에러 메시지를 출력하고\n","사용자에게 새로운 문장을 입력해달라고 요구청합니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"OyqngeTsC0jo","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593770477613,"user_tz":-540,"elapsed":647,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["def evaluate(encoder, decoder,searcher ,voc, sentence, max_length=MAX_LENGTH):\n","    ### 입력 시퀀스를 배치 형태로 만듭니다\n","    # 단어 -> 인덱스\n","    indexes_batch = [indexesFromSentence(voc, sentence)]\n","    # lengths 텐서를 만듭니다\n","    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n","    # 배치의 차원을 뒤집어서 모델이 사용하는 형태로 만듭니다\n","    input_batch = torch.LongTensor(indexes_batch).transpose(0, 1)\n","    # 적절한 디바이스를 사용합니다\n","    input_batch = input_batch.to(device)\n","    lengths = lengths.to(device)\n","    # searcher를 이용하여 문장을 디코딩합니다\n","    \n","    input_variable =  searcher(input_batch, lengths, max_length)\n","    #print(input_variable)\n","    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)\n","    decoder_hiddens = encoder_hidden[:decoder.n_layers]\n","    tokens =beam_decode(target_tensor, decoder_hiddens,encoder_outpus)\n","\n","    #tokens = searcher(input_batch, lengths, max_length)\n","    # 인덱스 -> 단어\n","    decoded_words = [voc.index2word[token.item()] for token in tokens]\n","    return decoded_words\n","\n","\n","\n","#before_input_sentence=''\n","\n","def evaluateInput(encoder, decoder,searcher, voc):\n","    input_sentence = ''\n","    user_query=[]\n","    bot_answer=[]\n","    while(1):\n","        try:\n","            # 입력 문장을 받아옵니다\n","            input_sentence = input('> ')\n","            user_query.append(input_sentence)  #추가\n","            #before_input_sentence=input_sentence       #추가\n","            \n","            # 종료 조건인지 검사합니다\n","            if input_sentence == 'q' or input_sentence == 'quit': \n","              # 새 파일에 대한 경로를 정의합니다\n","              datafile = os.path.join(corpus, \"user_formatted_movie_lines.txt\") #사용자의 대화 저장\n","\n","              delimiter = '\\t'\n","              # 구분자에 대해 unescape 함수를 호출합니다\n","              delimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n","\n","              # 대사 사전(dict), 대화 리스트(list), 그리고 각 항목의 이름을 초기화합니다\n","              lines = {}\n","\n","              MOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\n","              MOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n","\n","              # 결과를 새로운 csv 파일로 저장합니다\n","              print(\"\\nWriting newly formatted file...\")\n","              print(user_query)\n","              with open(datafile, 'a', encoding='utf-8') as outputfile:\n","                  writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n","                  for i in range(len(user_query)-1):\n","                  #     writer.writerow(pair)\n","                  #for pair in conversations:\n","                    writer.writerow([user_query[i],bot_answer[i]])\n","\n","              # 몇 줄을 예제 삼아 출력해 봅니다\n","              print(\"\\nSample lines from file:\")\n","              printLines(datafile)\n","              break\n","\n","\n","            # 문장을 정규화합니다\n","            input_sentence = normalizeString(input_sentence)\n","            # 문장을 평가합니다\n","            output_words = evaluate(encoder, decoder, searcher,voc, input_sentence)\n","            # 응답 문장을 형식에 맞춰 출력합니다\n","            output_words[:] = [x for x in output_words if not (x == 'EOS' or x == 'PAD')]\n","            bot_answer.append(' '.join(output_words)) #추가\n","            print('Bot:', ' '.join(output_words))\n","\n","\n","        except KeyError:\n","            print(\"Error: Encountered unknown word.\")\n","\n","            ##########################################추가#######################################\n","            # # 새 파일에 대한 경로를 정의합니다\n","            # datafile = os.path.join(corpus, \"user_formatted_movie_lines.txt\") #사용자의 대화 저장\n","\n","            # delimiter = '\\t'\n","            # # 구분자에 대해 unescape 함수를 호출합니다\n","            # delimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n","\n","            # # 대사 사전(dict), 대화 리스트(list), 그리고 각 항목의 이름을 초기화합니다\n","            # lines = {}\n","            # #conversations = []\n","            \n","            # conversations.append(before_input_sentence) #added\n","            # conversations.append(input_sentence) #added\n","            # conversations.append(\" \") #added\n","\n","            # MOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\n","            # MOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n","\n","            # # 대사(lines)를 읽어들여 대화(conversations)로 재구성합니다\n","            # # print(\"\\nProcessing corpus...\")\n","            # # lines = loadLines(os.path.join(corpus, \"movie_lines.txt\"), MOVIE_LINES_FIELDS)\n","            # # print(\"lines =\",lines)\n","            # # print(\"\\nLoading conversations...\")\n","            # # conversations = loadConversations(os.path.join(corpus, \"movie_conversations.txt\"),\n","            # #                                   lines, MOVIE_CONVERSATIONS_FIELDS)\n","            # # print(\"conversations= \",conversations)\n","\n","\n","            # # 결과를 새로운 csv 파일로 저장합니다\n","            # print(\"\\nWriting newly formatted file...\")\n","            # with open(datafile, 'a', encoding='utf-8') as outputfile:\n","            #     writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n","            #     # for pair in extractSentencePairs(conversations):\n","            #     #     writer.writerow(pair)\n","            #     #for pair in conversations:\n","            #     writer.writerow([conversations[0],conversations[1]])\n","\n","            # # 몇 줄을 예제 삼아 출력해 봅니다\n","            # #print(\"\\nSample lines from file:\")\n","            # printLines(datafile)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"J3I3h3cMVv7E","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593769878153,"user_tz":-540,"elapsed":671,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}}},"source":["def evaluate(encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH):\n","    ### 입력 시퀀스를 배치 형태로 만듭니다\n","    # 단어 -> 인덱스\n","    indexes_batch = [indexesFromSentence(voc, sentence)]\n","    # lengths 텐서를 만듭니다\n","    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n","    # 배치의 차원을 뒤집어서 모델이 사용하는 형태로 만듭니다\n","    input_batch = torch.LongTensor(indexes_batch).transpose(0, 1)\n","    # 적절한 디바이스를 사용합니다\n","    input_batch = input_batch.to(device)\n","    lengths = lengths.to(device)\n","    # searcher를 이용하여 문장을 디코딩합니다\n","    \n","    tokens, scores = searcher(input_batch, lengths, max_length)\n","    # 인덱스 -> 단어\n","    decoded_words = [voc.index2word[token.item()] for token in tokens]\n","    return decoded_words\n","\n","\n","\n","#before_input_sentence=''\n","\n","def evaluateInput(encoder, decoder, searcher, voc):\n","    input_sentence = ''\n","    user_query=[]\n","    bot_answer=[]\n","    while(1):\n","        try:\n","            # 입력 문장을 받아옵니다\n","            input_sentence = input('> ')\n","            user_query.append(input_sentence)  #추가\n","            #before_input_sentence=input_sentence       #추가\n","            \n","            # 종료 조건인지 검사합니다\n","            if input_sentence == 'q' or input_sentence == 'quit': \n","              # 새 파일에 대한 경로를 정의합니다\n","              datafile = os.path.join(corpus, \"user_formatted_movie_lines.txt\") #사용자의 대화 저장\n","\n","              delimiter = '\\t'\n","              # 구분자에 대해 unescape 함수를 호출합니다\n","              delimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n","\n","              # 대사 사전(dict), 대화 리스트(list), 그리고 각 항목의 이름을 초기화합니다\n","              lines = {}\n","\n","              MOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\n","              MOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n","\n","              # 결과를 새로운 csv 파일로 저장합니다\n","              print(\"\\nWriting newly formatted file...\")\n","              print(user_query)\n","              with open(datafile, 'a', encoding='utf-8') as outputfile:\n","                  writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n","                  for i in range(len(user_query)-1):\n","                  #     writer.writerow(pair)\n","                  #for pair in conversations:\n","                    writer.writerow([user_query[i],bot_answer[i]])\n","\n","              # 몇 줄을 예제 삼아 출력해 봅니다\n","              print(\"\\nSample lines from file:\")\n","              printLines(datafile)\n","              break\n","\n","\n","            # 문장을 정규화합니다\n","            input_sentence = normalizeString(input_sentence)\n","            # 문장을 평가합니다\n","            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)\n","            # 응답 문장을 형식에 맞춰 출력합니다\n","            output_words[:] = [x for x in output_words if not (x == 'EOS' or x == 'PAD')]\n","            bot_answer.append(' '.join(output_words)) #추가\n","            print('Bot:', ' '.join(output_words))\n","\n","\n","        except KeyError:\n","            print(\"Error: Encountered unknown word.\")\n","\n","            ##########################################추가#######################################\n","            # # 새 파일에 대한 경로를 정의합니다\n","            # datafile = os.path.join(corpus, \"user_formatted_movie_lines.txt\") #사용자의 대화 저장\n","\n","            # delimiter = '\\t'\n","            # # 구분자에 대해 unescape 함수를 호출합니다\n","            # delimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n","\n","            # # 대사 사전(dict), 대화 리스트(list), 그리고 각 항목의 이름을 초기화합니다\n","            # lines = {}\n","            # #conversations = []\n","            \n","            # conversations.append(before_input_sentence) #added\n","            # conversations.append(input_sentence) #added\n","            # conversations.append(\" \") #added\n","\n","            # MOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\n","            # MOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n","\n","            # # 대사(lines)를 읽어들여 대화(conversations)로 재구성합니다\n","            # # print(\"\\nProcessing corpus...\")\n","            # # lines = loadLines(os.path.join(corpus, \"movie_lines.txt\"), MOVIE_LINES_FIELDS)\n","            # # print(\"lines =\",lines)\n","            # # print(\"\\nLoading conversations...\")\n","            # # conversations = loadConversations(os.path.join(corpus, \"movie_conversations.txt\"),\n","            # #                                   lines, MOVIE_CONVERSATIONS_FIELDS)\n","            # # print(\"conversations= \",conversations)\n","\n","\n","            # # 결과를 새로운 csv 파일로 저장합니다\n","            # print(\"\\nWriting newly formatted file...\")\n","            # with open(datafile, 'a', encoding='utf-8') as outputfile:\n","            #     writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n","            #     # for pair in extractSentencePairs(conversations):\n","            #     #     writer.writerow(pair)\n","            #     #for pair in conversations:\n","            #     writer.writerow([conversations[0],conversations[1]])\n","\n","            # # 몇 줄을 예제 삼아 출력해 봅니다\n","            # #print(\"\\nSample lines from file:\")\n","            # printLines(datafile)"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TSotBu3eVv7L","colab_type":"text"},"source":["모델 수행하기\n","-------------\n","\n","마지막으로, 우리의 모델을 수행해 볼 시간입니다!\n","\n","우리가 챗봇 모델을 학습할 때든 테스트할 때든, 우리는 각각의 인코더 및\n","디코더 모델을 초기화해줘야 합니다. 다음 블록에서는 우리가 원하는대로\n","설정을 맞추고, 처음부터 시작할지, 아니면 checkpoint를 불러올지 정하고,\n","모델을 빌드하고 초기화합니다. 성능을 최적화하기 위해서는 모델 설정을\n","여러가지로 바꿔 보면서 테스트해보기 바랍니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"MEP8_hoTVv7M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1593769240429,"user_tz":-540,"elapsed":13400,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"0d356d16-c62f-4ba3-de08-a6ae8ec34f46"},"source":["# 모델을 설정합니다\n","model_name = 'cb_model'\n","attn_model = 'dot'\n","#attn_model = 'general'\n","#attn_model = 'concat'\n","hidden_size = 500\n","encoder_n_layers = 2\n","decoder_n_layers = 2\n","dropout = 0.1\n","batch_size = 64\n","\n","################ 학습된 모델 불러옴.###################\n","# 불러올 checkpoint를 설정합니다. 처음부터 시작할 때는 None으로 둡니다.\n","loadFilename = None\n","checkpoint_iter = 4000\n","\n","#원래 주석이었음\n","loadFilename = os.path.join(save_dir, model_name, corpus_name,\n","                           '{}-{}_{}'.format(encoder_n_layers, decoder_n_layers, hidden_size),\n","                           '{}_checkpoint.tar'.format(checkpoint_iter))\n","\n","#print(\"loadFilename= \",loadFilename)\n","\n","############# loadFilename이 제공되는 경우에는 모델을 불러옵니다################\n","if loadFilename:\n","    # 모델을 학습할 때와 같은 기기에서 불러오는 경우\n","    checkpoint = torch.load(loadFilename)\n","    # GPU에서 학습한 모델을 CPU로 불러오는 경우\n","    #checkpoint = torch.load(loadFilename, map_location=torch.device('cpu'))\n","    encoder_sd = checkpoint['en']\n","    decoder_sd = checkpoint['de']\n","    encoder_optimizer_sd = checkpoint['en_opt']\n","    decoder_optimizer_sd = checkpoint['de_opt']\n","    embedding_sd = checkpoint['embedding']\n","    voc.__dict__ = checkpoint['voc_dict']\n","\n","\n","print('Building encoder and decoder ...')\n","# 단어 임베딩을 초기화합니다\n","embedding = nn.Embedding(voc.num_words, hidden_size)\n","if loadFilename:\n","    embedding.load_state_dict(embedding_sd)\n","# 인코더 및 디코더 모델을 초기화합니다\n","encoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)\n","decoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words, decoder_n_layers, dropout)\n","if loadFilename:\n","    encoder.load_state_dict(encoder_sd)\n","    decoder.load_state_dict(decoder_sd)\n","# 적절한 디바이스를 사용합니다\n","encoder = encoder.to(device)\n","decoder = decoder.to(device)\n","print('Models built and ready to go!')"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Building encoder and decoder ...\n","Models built and ready to go!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UXBpqexeVv7Q","colab_type":"text"},"source":["학습 수행하기\n","~~~~~~~~~~~~~\n","\n","모델을 학습해보고 싶다면 다음 블록을 수행하면 됩니다.\n","\n","먼저 학습 패러미터를 설정하고, optimizer를 초기화한 뒤, 마지막으로 ``trainIters``\n","함수를 호출하여 학습 단계를 진행합니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"19TnYMiKVv7R","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"executionInfo":{"status":"ok","timestamp":1593769258324,"user_tz":-540,"elapsed":3049,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"ca3afd68-19c8-4106-eb81-64797e1afb22"},"source":["#학습된 모델을 불러와서 \n","##########################이 코드블록은 사용안함##########################\n","\n","# 학습 및 최적화 설정\n","clip = 50.0\n","teacher_forcing_ratio = 1.0\n","learning_rate = 0.0001\n","decoder_learning_ratio = 5.0\n","n_iteration = 4000\n","print_every = 1\n","save_every = 500\n","\n","# Dropout 레이어를 학습 모드로 둡니다\n","encoder.train()\n","decoder.train()\n","\n","# Optimizer를 초기화합니다\n","print('Building optimizers ...')\n","encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)\n","decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)\n","if loadFilename:\n","    encoder_optimizer.load_state_dict(encoder_optimizer_sd)\n","    decoder_optimizer.load_state_dict(decoder_optimizer_sd)\n","\n","# cuda가 있다면 cuda를 설정합니다\n","for state in encoder_optimizer.state.values():\n","    for k, v in state.items():\n","        if isinstance(v, torch.Tensor):\n","            state[k] = v.cuda()\n","\n","for state in decoder_optimizer.state.values():\n","    for k, v in state.items():\n","        if isinstance(v, torch.Tensor):\n","            state[k] = v.cuda()\n","    \n","# 학습 단계를 수행합니다\n","print(\"Starting Training!\")\n","trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n","           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n","           print_every, save_every, clip, corpus_name, loadFilename)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Building optimizers ...\n","Starting Training!\n","Initializing ...\n","Training...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"X3SB4oM148F5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"error","timestamp":1593768088545,"user_tz":-540,"elapsed":1124,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"bb58b075-eb4e-4b38-8bc6-dd71f97fbe44"},"source":["# # ###########################추가: voc2(==user_formatted_movie_lines.txt)에 대한 학습 #################\n","\n","# # 학습 단계를 수행합니다\n","# print(\"Starting Training!\")\n","# trainIters(model_name, voc2, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n","#            embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n","#            print_every, save_every, clip, corpus_name, loadFilename)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Starting Training!\n","or her or her or any of them ?\n"],"name":"stdout"},{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-107-9bfa3471ebe2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m trainIters(model_name, voc2, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n\u001b[1;32m      6\u001b[0m            \u001b[0membedding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoder_n_layers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecoder_n_layers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msave_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m            print_every, save_every, clip, corpus_name, loadFilename)\n\u001b[0m","\u001b[0;32m<ipython-input-59-3ec13c269d8d>\u001b[0m in \u001b[0;36mtrainIters\u001b[0;34m(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer, embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size, print_every, save_every, clip, corpus_name, loadFilename)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# 각 단계에 대한 배치를 읽어옵니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n\u001b[0;32m----> 5\u001b[0;31m                       for _ in range(n_iteration)]\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;31m# 초기화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-59-3ec13c269d8d>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# 각 단계에 대한 배치를 읽어옵니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n\u001b[0;32m----> 5\u001b[0;31m                       for _ in range(n_iteration)]\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;31m# 초기화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-105-d77e21818fa4>\u001b[0m in \u001b[0;36mbatch2TrainData\u001b[0;34m(voc, pair_batch)\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0minput_batch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpair\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m         \u001b[0moutput_batch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpair\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m     \u001b[0minp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minputVar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m     \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_target_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moutputVar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_target_len\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-105-d77e21818fa4>\u001b[0m in \u001b[0;36minputVar\u001b[0;34m(l, voc)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# 입력 시퀀스 텐서에 패딩한 결과와 lengths를 반환합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minputVar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0mindexes_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexesFromSentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msentence\u001b[0m \u001b[0;32min\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mindexes\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mindexes_batch\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mpadList\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzeroPadding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexes_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-105-d77e21818fa4>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# 입력 시퀀스 텐서에 패딩한 결과와 lengths를 반환합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minputVar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0mindexes_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexesFromSentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msentence\u001b[0m \u001b[0;32min\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mindexes\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mindexes_batch\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mpadList\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzeroPadding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexes_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-105-d77e21818fa4>\u001b[0m in \u001b[0;36mindexesFromSentence\u001b[0;34m(voc, sentence)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mindexesFromSentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword2index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mEOS_token\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-105-d77e21818fa4>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mindexesFromSentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword2index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mEOS_token\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'or'"]}]},{"cell_type":"code","metadata":{"id":"nMOT4nDppMIB","colab_type":"code","colab":{}},"source":["##########################추가 ######################################\n","#유저-봇 대화내용을 학습시키기 위한 코드 블록\n","\n","\n","# 학습 및 최적화 설정\n","clip = 50.0\n","teacher_forcing_ratio = 1.0\n","learning_rate = 0.0001\n","decoder_learning_ratio = 5.0\n","n_iteration = 100 #4000\n","print_every = 1\n","save_every = 500\n","\n","# Dropout 레이어를 학습 모드로 둡니다\n","encoder.train()\n","decoder.train()\n","\n","# Optimizer를 초기화합니다\n","print('Building optimizers ...')\n","encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)\n","decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)\n","if loadFilename:\n","    encoder_optimizer.load_state_dict(encoder_optimizer_sd)\n","    decoder_optimizer.load_state_dict(decoder_optimizer_sd)\n","\n","# cuda가 있다면 cuda를 설정합니다\n","for state in encoder_optimizer.state.values():\n","    for k, v in state.items():\n","        if isinstance(v, torch.Tensor):\n","            state[k] = v.cuda()\n","\n","for state in decoder_optimizer.state.values():\n","    for k, v in state.items():\n","        if isinstance(v, torch.Tensor):\n","            state[k] = v.cuda()\n","\n","# 학습 단계를 수행합니다\n","print(\"Starting Training!\")\n","trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n","           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n","           print_every, save_every, clip, corpus_name, loadFilename)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Sn7-4JGxVv7Y","colab_type":"text"},"source":["평가 수행하기\n","~~~~~~~~~~~~~\n","\n","여러분의 모델과 채팅을 해보고 싶다면 다음 블록을 수행하면 됩니다.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"DHOyAvGjVv7Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":670},"executionInfo":{"status":"error","timestamp":1593770490908,"user_tz":-540,"elapsed":3889,"user":{"displayName":"Mr Lee","photoUrl":"","userId":"03714014202869640720"}},"outputId":"b72a1183-c0ae-462d-c5e8-6e797da103c1"},"source":["# Dropout 레이어를 평가 모드로 설정합니다\n","encoder.eval()\n","decoder.eval()\n","\n","# 탐색 모듈을 초기화합니다\n","searcher = GreedySearchDecoder(encoder, decoder)\n","#searcher = BeamSearchNode()\n","print(searcher)\n","# 채팅을 시작합니다 (다음 줄의 주석을 제거하면 시작해볼 수 있습니다)\n","\n","evaluateInput(encoder, decoder,searcher, voc)\n","\n","\n"],"execution_count":47,"outputs":[{"output_type":"stream","text":["GreedySearchDecoder(\n","  (encoder): EncoderRNN(\n","    (embedding): Embedding(7826, 500)\n","    (gru): GRU(500, 500, num_layers=2, dropout=0.1, bidirectional=True)\n","  )\n","  (decoder): LuongAttnDecoderRNN(\n","    (embedding): Embedding(7826, 500)\n","    (embedding_dropout): Dropout(p=0.1, inplace=False)\n","    (gru): GRU(500, 500, num_layers=2, dropout=0.1)\n","    (concat): Linear(in_features=1000, out_features=500, bias=True)\n","    (out): Linear(in_features=500, out_features=7826, bias=True)\n","    (attn): Attn()\n","  )\n",")\n","> hello\n"],"name":"stdout"},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-f172cbb026ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# 채팅을 시작합니다 (다음 줄의 주석을 제거하면 시작해볼 수 있습니다)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mevaluateInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msearcher\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvoc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-46-c65150bfca65>\u001b[0m in \u001b[0;36mevaluateInput\u001b[0;34m(encoder, decoder, searcher, voc)\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0minput_sentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnormalizeString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_sentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m             \u001b[0;31m# 문장을 평가합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m             \u001b[0moutput_words\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msearcher\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_sentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m             \u001b[0;31m# 응답 문장을 형식에 맞춰 출력합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0moutput_words\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0moutput_words\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'EOS'\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'PAD'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-46-c65150bfca65>\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(encoder, decoder, searcher, voc, sentence, max_length)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0minput_variable\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0msearcher\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_length\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m#print(input_variable)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mencoder_outputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoder_hidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_variable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mdecoder_hiddens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoder_hidden\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mdecoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_layers\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mtokens\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mbeam_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_tensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecoder_hiddens\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mencoder_outpus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    548\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-20-afb9bfeb627c>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input_seq, input_lengths, hidden)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_seq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_lengths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;31m# 단어 인덱스를 임베딩으로 변환합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0membedded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_seq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0;31m# RNN 모듈을 위한 패딩된 배치 시퀀스를 패킹합니다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mpacked\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_padded_sequence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membedded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_lengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    548\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/sparse.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    112\u001b[0m         return F.embedding(\n\u001b[1;32m    113\u001b[0m             \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_norm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m             self.norm_type, self.scale_grad_by_freq, self.sparse)\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36membedding\u001b[0;34m(input, weight, padding_idx, max_norm, norm_type, scale_grad_by_freq, sparse)\u001b[0m\n\u001b[1;32m   1722\u001b[0m         \u001b[0;31m# remove once script supports set_grad_enabled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1723\u001b[0m         \u001b[0m_no_grad_embedding_renorm_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_norm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1724\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale_grad_by_freq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msparse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1725\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1726\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Expected tensor for argument #1 'indices' to have scalar type Long; but got torch.cuda.FloatTensor instead (while checking arguments for embedding)"]}]},{"cell_type":"markdown","metadata":{"id":"sEVypX35Vv7e","colab_type":"text"},"source":["맺음말\n","------\n","\n","이번 튜토리얼을 이것으로 마무리하겠습니다. 축하합니다! 여러분은 이제 생성\n","챗봇 모델을 만들기 위한 기초 지식을 습득했습니다. 만약 좀 더 관심이 있다면\n","모델이나 학습 패러미터를 수정해 보면서, 혹은 모델을 학습할 데이터를 바꿔\n","보면서 챗봇의 행동을 수정해볼 수 있을 것입니다.\n","\n","그 외에도 딥러닝의 멋진 활용 예에 대한 PyTorch 튜토리얼이 있으니 한 번\n","확인해 보기 바랍니다!\n","\n","\n"]}]}